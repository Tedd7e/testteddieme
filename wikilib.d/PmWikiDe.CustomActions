version=pmwiki-2.3.9 ordered=1 urlencoded=1
author=MFWolff
charset=UTF-8
csum=hlt php (+69)
ctime=1304589690
name=PmWikiDe.CustomActions
rev=11
targets=PmWikiDe.CustomActions,PmWikiDe.AvailableActions,PmWikiDe.CustomMarkup,PmWikiDe.Functions,Category.PmWikiDeveloper,!PmWikiDeveloper
text=(:title Eigene Aktionen:)%0a(:Summary: Lasse PmWiki selbstdefinierte Werte im URL-Wert 'action=...' verarbeiten:)%0a(:Original_Page: PmWiki.{$Name}:)%0a(:Translation_Date: 2011-05-06:)%0a(:Translation_Status: %25green%25fertig%25%25:)%0a(:Audience: Administratoren (Fortgeschritten), Entwickler:)%0a%0aMit Kochbuchrezepten ist es möglich, [[PmWikiDe/AvailableActions|eigene Seitenaktionen]] für PmWiki zu definieren. Der korrespondierende Kode wird ausgeführt, wenn ein Parameter wie in dem folgenden Beispiel angegeben wird:%0a%0a->[@[[MyGroup/MyPage@]@@'''?action=myaction''']]@@ %0a%0aMit einer solchen Aktion kann man die Anzeige und Behandlung der aktuellen Seite ändern - wie in den Standardaktionen %0a[[{$FullName}?action=edit|[@edit@]]] oder [[{$FullName}?action=print|[@print@]]]. Oder man kann viele Wikiseiten auf einmal manipulieren oder globale Aufgabe durchführen wie das Ändern der gespeicherten Textauszeichnungen aller Seiten in dieser Gruppe (Wehe!) oder Daten sammeln aus allen Seiten im Wiki. Abhängig von seinem Kode kann es sogar egal sein, welchem Seiten-URL man die Aktion anfügt wie bei der Standardaktion [[{$FullName}?action=phpinfo|[@phpinfo@]]].%0a%0aWährend ein [[custom markup|+]] vornehmlich bedeutungsvolle Textersetzungen an der aktuellen Seite vornehmen soll, wird eine Seitenaktion von einem URL-Parameter ausgelöst und kann deshalb in Verweisen als Aufruf von PHP-Funktionen eingesetzt werden, mit Wirkung auf die aktuelle Seite oder auf das ganze Wiki, wie in diesem Beispiel:%0a%0a%0a(:markup:) [=%0a[[{*$FullName}?action=myaction| führe meine Aktion aus]]%0a=]%0a%0aAuf jeden Fall müssen Sie sich klar darüber sein, wenn Sie [[Functions|PmWikis eingebaute Funtionen]] für angepasste Aktionen (Benutzeraktionen) nutzen wollen, dass Kochbuchrezepte in die [@config.php@] eingefügt werden, welche früh während der Seitenbearbeitung aufgerufen wird. Das bedeutet, dass zu jenem Zeitpunkt viele Variablen der internen Funktionen (z. B. in [@pmwiki.php@]) noch gar nicht sauber initialisiert sind. Dadurch können sich diese Funktionen unerwartet verhalten, wenn sie direkt in den eingefügten Rezeptdateien aufgerufen werden. Erinnern Sie sich, dass auch Funktionen, die für angepasste Textauszeichnungen (Custom markups) benutzt werden, immer erst später in dem Prozess aufgerufen werden &mdash; %25hlt php%25[@Markup()@] berücksichtigt das. Analog können Sie einen ''Aktionsbehandler'' (action handler) nutzen, der PmWiki veranlasst, seinen Aktionskode zur rechten Zeit auszuführen, wenn alle internen Arbeiten erledigt sind. %0a%0aDas folgende Beispiel zeigt, wie Sie eine Benutzeraktion [@myaction@] aufsetzen können für den URL ...[@/MyGroup/MyPage?action=myaction@]. Das folgende unsinnige, aber instruktive, Beispiel wird dem Text einer ''anderen'' Seite %0a[@MyGroup.MyOtherPage@] ein 'x' voranstellen. Dann wird die Seite [@MyGroup.MyPage@], die in dem URL steht, angezeigt.%0a%0a%0a>>frame font-size=smaller%3c%3c%25hlt php%25[@%0a$HandleActions['myaction'] = 'HandleMyAction';  # Wenn der URL 'action=myaction' enthält, %0a                                                # rufe HandleMyAction zur rechen Zeit auf%0a$HandleAuth['myaction'] = 'admin';              # Autorisierungsebene $auth für HandleMyAction%0a%0afunction HandleMyAction($pagename, $auth) {     # Parameter (Signatur) der Handler-Funktion, die PmWiki erwartet%0a  global $Author;                               # aktuellen Benutzernamen behalten, z. B. für Seitenverlauf%0a  $old = RetrieveAuthPage('MyGroup.MyOtherPage', $auth);   # Alle Informationen der Seite MyGroup.MyOtherPage holen%0a  $new = $old;                                  # die Seiteninformationen, die unverändert bleiben, %0a                                                # kopieren (z. B. Seitenverlauf)%0a  $new['text'] = "x".$old['text'];              # ... etwas am alten Text manipulieren%0a  $Author='myactionbot';                        # Autorname, der im Seitenverlauf für diese Manipulation %0a                                                # eingetragen werden soll%0a  $pn='MyGroup.MyOtherPage';                    # nötig, weil UpdatePage nur mit Variablen (by reference) %0a                                                # als Parameter aufgerufen werden darf%0a  UpdatePage($pn,$old,$new);                    # ändere die aktuelle Wikiseite%0a  HandleBrowse($pagename);                      # zeige die in dem URL angegebene Seite (z. B. MyGroup.MyPage) an%0a}%0a@]%0a>>%3c%3c%0a%0aAnmerkungen:%0a* Mit 'admin' als Autorisierungsebene wird die Aktion den Benutzer auffordern, ein Admin-Passwort einzugeben, es sei denn, es ist von einem früheren Login schon im Cookie vorhanden. Mit 'read' kann [@RetrieveAuthPage()@] nur auf Seiten zugreifen, die der aktuelle Benutzer lesen darf.%0a* Aus bestimmten Gründen muss  %25hlt php%25[@UpdatePage()@] mit Variablen (by reference) aufgerufen werden, deshalb würde [@UpdatePage('MyGroup.MyOtherPage',$old,$new),@] in einen PHP-Fehler münden.%0a* Während sich diese Aktion hier auf andere Seiten ([@MyOtherPage@]) auswirkt, würde man sein Skript eher nach  %25hlt php%25[@UpdatePage()@] beenden, vielleicht nachdem man eine schlichte Statusmeldung ausgegeben hat, anstatt eine Wikiseite mit [@HandleBrowse()@] anzuzeigen.%0a* Wenn eine UpdatePage-Aktion die Bearbeitung von Formularfeldern einschließt, bereinigt man die Eingabe, bevor man sie einsetzt, um  $new['text'] aufzubauen. Zum Beispiel %0a--> %25hlt php%25[@$new['text'] = str_replace("\r",'',stripmagic($_POST['text']));@].%0a* Es gibt eine Liste mit [[Available Actions|+]] (Standardaktionen, Diagnoseaktionen, Skriptaktionen, Kochbuchaktionen)%0a%0aKategorie: [[!PmWiki Developer]]\\%0a&nbsp;%0a
time=1660979502
title=Eigene Aktionen
