version=pmwiki-2.3.22 ordered=1 urlencoded=1
author=MFWolff
charset=UTF-8
csum=$FmtV['$TokenName'] (+297)
ctime=1305039971
name=PmWikiDe.Forms
rev=28
targets=Cookbook.InputDefault,PmWikiDe.OtherVariables,PmWikiDe.Functions,Cookbook.FormValidation,Cookbook.FormExtensions,Cookbook.InputFormsAndJavaScript,PmWikiDe.PageLists,Cookbook.PmForm,Cookbook.Fox,Cookbook.Input,Cookbook.WikiForms,Cookbook.ProcessForm
text=(:title Formulare:)%0a(:Summary: So kann man Eingabeformulare in Wikiseiten einbetten:)%0a(:Original_Page: PmWiki.{$Name} :)%0a(:Translation_Date: 2012-07-06:)%0a(:Translation_Status: %25green%25fertig%25%25:)%0a(:Audience: Autoren (Fortgeschrittene), Entwickler und Administratoren:)%0a%0aDiese Seite erklärt, wie man Eingabeformulare in Wikiseiten einbetten kann.%0a%0aEingabeformulare behandeln die Eingaben eigentlich nicht &mdash; dies Feature erlaubt einfach nur die Erzeugung von Formularen innerhalb einer Wikiseite. %0aDie Auswertung von Formularen findet man in den Kochbüchern (s. u.).%0a%0a%0a!! Markup%0a%0aZwei Direktiven braucht man, um ein Formular zu beginnen und zu beenden:%0a%0a    %25pmhlt%25[@(:input form "url" method:)@]%0a    ...%0a    %25pmhlt%25[@(:input end:)@]%0a	%0aDie %25pmhlt%25[@(:input form:)@]-Direktive startet ein Formular, das Daten an ''url'' (optional ''action=''url) mit der Methode ''method'' (optional ''method=''method) sendet.%0aWenn der Url weggelassen wird, wird die aktuelle Seite angenommen. Der Url muss in Anführungszeichen gesetzt sein, wenn er nicht über ''action='' angegeben wurde. %0aEin optionaler [@Name="Formularname"@] kann angegeben werden, um das Formular zu benennen. %0aMan kann explizit @@action=url@@ oder @@method=get@@ angeben oder man benutzt sie als positionierte Parameter.%0a%0aWenn Ihre Site ?n=Gruppe.Seite benutzt, um den Seitennamen anzugeben, dann erlaubt ein zusätzliches Feld %25pmhlt%25[@(:input hidden name=n value={$FullName}:)@] dem Formular, die Daten an die aktuelle Seite zu senden als Alternative zur Angabe des vollständigen URLs in [@action=url@]. %0a%0aDie %25pmhlt%25[@(:input end:)@]-Direktive schließt das aktuelle Formular.%0a%0aAnmerkung: Dies Feature garantiert nicht, dass die Ausgabe des Formulars korrektes HTML ist &ndash; es nimmt an, dass der Autor ein bisschen was von der Sache versteht. [@(:input form:)@] und  %25pmhlt%25[@(:input end:)@] sollten nicht innerhalb von Tabellen erscheinen und alle Formularfelder und Kontrollelemente sollten innerhalb des [@(:input form:)@] ...  [@(:input end:)@]-Blockes stehen.%0a%0a%0a[[#standardinputcontrols]]%0a!!Standardeingabeelemente%0aDie Standardeingabeelemente sind%0a    %25pmhlt%25[@(:input text name value size="n":)@]%0a    %25pmhlt%25[@(:input hidden name value:)@]%0a    %25pmhlt%25[@(:input password name value:)@]%0a    %25pmhlt%25[@(:input search name value:)@]%0a    %25pmhlt%25[@(:input number name value min="x" max="y" step="z":)@]%0a    %25pmhlt%25[@(:input email name value:)@]%0a    %25pmhlt%25[@(:input tel name value:)@]%0a    %25pmhlt%25[@(:input url name value:)@]%0a    %25pmhlt%25[@(:input date name value:)@]%0a    %25pmhlt%25[@(:input radio name value label checked="checked":)@]%0a    %25pmhlt%25[@(:input checkbox name value label checked="checked":)@]%0a    %25pmhlt%25[@(:input datalist id value:)@] - siehe [[#datalist|datalist]]%0a    %25pmhlt%25[@(:input select name value label:)@] - siehe[[#select|select]]%0a    %25pmhlt%25[@(:input default default-name default-value:)@] - siehe [[Cookbook:InputDefault|default]]%0a    %25pmhlt%25[@(:input textarea name [=value=] rows="n" cols="n":)@]%0a    %25pmhlt%25[@(:input file name "label":)@]%0a    %25pmhlt%25[@(:input image name "src" "alt":)@]%0a    %25pmhlt%25[@(:input reset name "label":)@]%0a    %25pmhlt%25[@(:input button name "value":)@]%0a    %25pmhlt%25[@(:input pmtoken:) @] - siehe [[#pmtoken|pmtoken]]%0a    %25pmhlt%25[@(:input submit name "value":)@]%0aDabei werden ''name'' und ''value'' in der HTML-Syntax geschrieben: name="addr" value="808 W Franklin".%0a%0aFür die meisten Elemente hat die Direktive die Form:%0a%0a    %25pmhlt%25[@(:input ''type'' ''name'' ''value'' ''parameter=value'':)@]%0a%0awobei ''type'' der Typ des Eingabeelementes (Beschreibung unten), ''name'' der Name des Elements und ''value'' der Anfangswert ist. Parameter werden benutzt, um die zusätzlichen Attribute des Elements anzugeben. Wenn ''value'' Leerzeichen enthält, gehört es in Anführungszeichen. Wenn es Zeilenumbrüche enthält (Textarea, hidden Elements), schließen Sie es in %25pmhlt%25[@[=...=]@] ein.  	%0a%0aDas Folgende erstellt beispielsweise ein Texteingabefeld mit eine Größe von 30 Zeichen.	%0a%0a(:markup class=horiz:)%0a(:input text authorid "Jane Doe" size=30:)%0a(:markupend:)%0a%0aEin Autor kann auch den Namen und den Wert direkt angeben mit [@name=@]- und [@value=@]-Attributen.%0a%0a(:markup class=horiz:) %0a(:input text name=authorid value="Jane Doe" size=30:)%0a(:markupend:)%0a%0aFür das Textarea-Element kann seit PmWiki 2.2.0beta45 ein Wert gesetzt werden. Schließen Sie den Wert in  %25pmhlt%25[@[=...=]@] ein, wenn er Leerzeichen oder Zeilenumbrüche enthält.%0a%0aDas %25pmhlt%25[@submit@]-Element wird häufiger geschrieben als:%0a%0a    %25pmhlt%25[@(:input=] submit value="label":)@]%0a%0aHier ist ein komplexeres Beispiel, etwa für eine Aufforderung sich anzumelden:%0a %0a%0a(:markup class=horiz:) [=%0a(:input form "http://www.example.com":)%0a(:input hidden action login:)%0a||     Name:||(:input text username:)    ||%0a|| Passwort:||(:input password password:)||%0a||          ||(:input checkbox terms yes "Bedingungen akzeptiert"  required=required:) ||%0a|| ||(:input submit value="Anmelden":) ||%0a(:input end:)%0a=]%0a%0a[[#field_attributes]]%0a!! Generelle Formularfeldattribute%0a%0a* %25pmhlt%25[@(:input ... focus=1:)@] Setzt man @@focus=1@@, erhält das Element den anfängliche Focus, wenn das Formular das erste Mal erscheint. %0a%0a* Die folgenden erweiterten HTML-Attribute werden unterstützt: @@name, value, id, class, rows, cols, size, maxlength, action, method, accesskey, tabindex, multiple, checked, disabled, readonly, enctype, src, alt, title, required, placeholder, autocomplete, min, max, step, pattern, list, formnovalidate, accept, autofocus, lang@@. Für eine weiterführende Beschreibung, siehe ihre Entsprechungen unter [[https://www.w3.org/TR/html5/forms.html#common-input-element-attributes|w3c reference: HTML5 form attributes]] (nicht alle von ihnen können für jedes Formularelement eingesetzt werden). %0a%0a* Für Checkboxen und Radiobuttons wird der Text des "label"-Attributs ''hinter'' dem Eingabeelement als ein Label-Element angezeigt. Ein Klick darauf aktiviert oder deaktiviert das Eingabeelement. Das Label darf nur reiner Text sein (ohne Inlineformatierung wie ''fett'' oder ''Verweise''). %0a%0a* Zusätzlich zu diesen Atrributen können die folgenden Attribute für die Zugänglichkeitverbesserung benutzt werden: @@role, aria-label, aria-labelledby, aria-describedby, aria-expanded, aria-pressed, aria-current, aria-hidden@@.%0a %0a* Zusätzlich zu den vorgegebenen Attributen  können Sie selbst erstellte ''data''-Attribute wie @@data-some-variable=value@@ oder @@data-other="Some data"@@ einsetzen (benutzbar in eigenen JavaScripts, CSS oder einigen Libraries). Das Attribut muss mit "data-" beginnen und darf nur lateinische Kleinbuchstaben [a-z] und Bindestriche [-] enthalten.\\%0aDas kann in der ''config.php''-Datei mit der Zeile  @@$EnableInputDataAttr = 0;@@ abgeschaltet werden.%0a%0a* %25pmhlt%25[@(:input form ... data-pmconfirm="Daten wirklich senden?":)@] oder [@(:input submit ... data-pmconfirm="Fortfahren?":)@], wird, wenn das Formular abgeschickt wird oder wenn der Benutzer auf die Schaltfläche klickt, eine Bestätigungsbox mit der Frage öffnen, die dem Benutzer erlaubt, fortzufahren oder abzubrechen (seit PmWiki 2.3.22). Das funktioniert für die Elemente ''form, submit, reset'' und ''button''. Der Text in Anführungszeichen wird dem Benutzer gezeigt. Beispiel:%0a>>indent%3c%3c%0a(:markup:)%0a(:input button bname "Alle Seiten löschen" data-pmconfirm="Sind Sie sicher, dass alle Seiten gelöscht werden sollen?  Das kann nicht rückgängig gemacht werden.":)%0a(:markupend:)%0a>>%3c%3c%0a%0a* Alle nicht unterstützten Attribute im Wiki-Markup werden nicht in der HTML-Ausgabe erscheinen.%0a%0a[[#select]]%0a!!([=:=]input select ... :)%0a%0aDie Basis für eine Auswahlbox ist eine Liste von Optionen:%0a%0a(:markup:) [=%0a(:input form:)%0a(:input select name=abc value=1 label=alpha :)%0a(:input select name=abc value=2 label=beta  :)%0a(:input select name=abc value=3 label=gamma :)%0a(:input submit:)%0a(:input end:)%0a=]%0a%0aDie Werte können (ohne Parameternamen) durch ihre Position angegeben werden.%0a %25pmhlt%25[@(:input select abc 1 alpha :)@]%0a%0aSie können die Größe der Auswahlbox angeben:%0a %25pmhlt%25[@(:input select abc 1 alpha size=3 :)@]%0a%0aSie können eine Auswahlbox für Mehrfachwahlen angeben (nur das erste Item muss die Attribute "size=3 multiple" haben):%0a %25pmhlt%25[@(:input select abc 1 alpha size=3 multiple:)@]%0a%0aDamit ein Element ausgewählt erscheint, benutzen Sie: @@selected=selected@@:%0a %25pmhlt%25[@(:input select abc 2 beta selected=selected:)@]%0a%0aAnmerkung: Damit zwei Auswahlboxen nebeneinander erscheinen, müssen Sie ihnen nicht nur verschiedene @@name=@@-Parameter geben, Sie müssen zwischen sie auch noch einen Trenner setzen, d. h. ein Zeichen, ein %25pmhlt%25[@&nbsp;@] oder wenigstens eine Nullsequenz [@[==]@].%0a%0a(:markup:)%0a(:input form:)%0a(:input select name=FIRST value=1:)(:input select name=FIRST value=2:)[==]%0a(:input select name=SECOND value=3:)(:input select name=SECOND value=4:)%0a(:input end:)%0a(:markupend:)%0a%0a%25note%25 Beachten Sie, dass in der HTML-Ausgabe nur die Attribute @@label@@, @@value@@ und @@selected@@ auf das [@%3coption>@]-HTML-Tag angewendet werden. Alle anderen Attribute einschließlich @@name@@, @@id@@, @@class@@ und @@title@@ werden auf das umschließende [@%3cselect>@]-HTML-tag angewendet, und spätere Definitionen ersetzen die früheren.%0a%0a[[#datalist]]%0a!!([=:=]input datalist ... :)%0aDies erlaubt ein Drop-Down-Menü einzurichten, das es dem Benutzer erlaubt, einen der präsentierten Werte (Vorschläge) auszuwählen oder einen neuen, anderen Wert einzutragen. Das Markup nimmt benannte oder positionierte Attribute an.%0a%0a  %25pmhlt%25[@(:input datalist ''id'' ''value'':)@]%0a  %25pmhlt%25[@(:input datalist id=''id'' value=''value'':)@]%0a%0a%0aEin dazugehörendes, existierendes %25pmhlt%25[@(:input text:)@]-Feld muss ein Attribut @@list=ID_der_Datenliste@@ haben, an das man die Vorschläge anbinden kann.%0a%0aDas Datenlistenelement ist unsichtbar und kann an beliebiger Stelle der Seite eingetragen werden. Die Liste der Vorschläge erscheint, wenn der Benutzer mit dem Tippen in dem Textfeld beginnt und filtert die vorgeschlagen Werte aus, die die eingetippten Zeichen in dem Textfeld enthält.%0a%0a(:markup:) [=%0aGeben Sie einen Browsernamen ein: (:input text browsers list=dlist_id :)%0a(:input datalist dlist_id Firefox:)%0a(:input datalist dlist_id Chrome:)%0a(:input datalist dlist_id Safari:)%0a(:input datalist dlist_id Edge:)%0a(:input datalist dlist_id MSIE:)%0a(:input datalist dlist_id Opera:)%0a(:input datalist dlist_id Lynx:)%0a=]%0a%0aDas Datenlistenelement ist kürzlich zum HTML-Standard hinzugefügt worden, siehe https://caniuse.com/#feat=datalist wegen der Unterstützung aktueller Browser.%0a%0a%25note%25Beachten Sie eine Besonderheit, wenn Sie zwei unmittelbar aufeinanderfolgende Datenlisten für verschiedene Eingabefelder haben. Sie sollten nicht nur den Datenlistenelementen unterschiedliche ID-Attribute geben, sondern auch einen Trenner wie einen Buchstaben, ein anderes Zeichen, ein geschütztes Leerzeichen ([@&nbsp;@]) oder wenigstens eine Nullsequenz [@[==]@] zwischen den Datenlisten einfügen: [@%0a(:input datalist dl_1 First:)%0a(:input datalist dl_1 Second:)[==]%0a(:input datalist dl_2 First:)%0a(:input datalist dl_2 Second:)%0a@]%0a%0a[[#pmtoken]]%0a!! ([=:=]input pmtoken:)%0a%0aDies fügt einen einmaligen Sitzungsidentifizierer als verstecktes Eingabefeld ein, um 'cross-site request forgeries' (etwa Website-übergreifende Anfragenfälschung, CSRF) zu verhindern. Das kann in eigene Formulare eingefügt werden, und der Aktion-Händler, der das Formular empfängt, kann prüfen, ob die Anfrage gültig ist, indem er [[Functions#pmtoken|pmtoken(1)]] aufruft.%0a%0aDer "Name" des HTML-Eingabe-Elements, standardmäßig 'pmtoken', kann durch Setzen von zum Beispiel %25hlt php%25@@$FmtV['$TokenName'] = 'myCSRFtoken';@@ geändert werden. In Ihrem Formular brauchen Sie weiterhin %25pmhlt%25[@(:input pmtoken:)@], das dann den neuen Namen für das HTML-Element benutzt.%0a%0a%0a!! Siehe auch%0a*[[Cookbook:Input Default]] [- - {Cookbook.InputDefault$:Summary}-]%0a*[[Cookbook:Form Validation]] [- - {Cookbook.FormValidation$:Summary}-]%0a*[[Cookbook:Form Extensions]] [- - {Cookbook.FormExtensions$:Summary}-]%0a*[[Cookbook:Input Forms and JavaScript]] [- - {Cookbook.InputFormsAndJavaScript$:Summary}-]%0a*[[PageLists#searchbox]] [- - Die [@(:searchbox:)@]-Direktive erzeugt ein Formular zur Suche im Wiki-]%0a%0aKompatible Rezepte:%0a* [[Cookbook:PmForm]] [- - {Cookbook/PmForm$:Summary}-]%0a* [[Cookbook:Fox]] [- - {Cookbook.Fox$:Summary}-]%0a* [[Cookbook:Wiki Forms]] [- - {Cookbook/WikiForms$:Summary}-]%0a* [[Cookbook:ProcessForm]] [- - {Cookbook/ProcessForm$:Summary}-]%0a
time=1682751001
title=Formulare
