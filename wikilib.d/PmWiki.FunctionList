version=pmwiki-2.3.17 ordered=1 urlencoded=1
author=simon
charset=UTF-8
csum=see $PageIndexTermsFunction (+30)
ctime=1153324334
name=PmWiki.FunctionList
rev=35
targets=Cookbook.Functions,Cookbook.ParseArgs,PmWiki.Functions,PmWiki.CondAuth,PmWiki.BasicVariables,PmWiki.CondExpr,PmWiki.PathVariables,PmWiki.MakeLink,PmWiki.PagelistVariables,Category.PmWikiInternals,!PmWikiInternals,Category.PmWikiDeveloper,!PmWikiDeveloper
text=(:Summary:A simple list of the functions provided by PmWiki:)%0a{$:Summary}.  Eventually to be fleshed out with more descriptions, and links to appropriate pages.%0a  %0a!! pmwiki.php:%0a%0a!!! Helper functions%0a||style="left-margin:0; padding-left:1em"%0a||[[Cookbook/Functions#SDV|SDV(&$v,$x)]] ||"set default value" -- assigns $x to $v only if $v isn't already defined ||%0a||SDVA(&$var,$val)           ||"set default value array" -- assign array $val to $var for undefined elements ||%0a||PUE($x)                    ||url encode $x ||%0a||IsEnabled(&$var,$f=0)      ||returns $var if it's set, otherwise returns $f ||%0a||mkdirp($dir)               ||create $dir if it doesn't exist (with appropriate permissions) ||%0a||fixperms($fname, $add = 0) ||correct file permissions on $fname ||%0a||stripmagic($x)             ||undo any effects of PHP's (broken) magic_quotes setting ||%0a||Lock($op)                  ||provide a semaphore for wiki processes (avoid read/write conflicts) ||%0a||[[Cookbook:ParseArgs|ParseArgs($x)]] ||parse strings containing lists of arguments ||%0a||StopWatch($x)              ||mark elapsed time in processing ||%0a||[[Functions#pmcrypt|pmcrypt($pass, $salt)]] ||create or check a password hash ||%0a%0a!!! Markup helper functions%0a  PSS($x)  - strip backslashes (added by the /e option to preg_replace) from $x. [[PmWiki/functions(#PSS)]]%0a  PVS($x)  - Convert \n\n sequences to %3c:vspace>%0a  PVSE($x) - Convert special characters to HTML entities (excluding quotes) and convert \n\n sequences to %3c:vspace>%0a  PZZ($x,$y='') - return a null string (used for its side effect of evaluating $x and $y)%0a  PRR($x=NULL)  - indicate that we need to restart markup processing%0a  PQA($x) - "prepare quoted arguments" -- quote any attributes in HTML tags%0a  NoCache($x='') - indicate that current page is not to be cached%0a%0a!!! Markup functions%0a  CompareArgs($arg)%0a  [[CondAuth]]($pagename, $condparm)%0a  [[CondExpr]]($pagename, $condname, $condparm)%0a  SetTmplDisplay($var, $val)%0a  AsSpaced($text) %0a  MatchNames($pagelist, $pat, $caseinsensitive = true) %0a-> $list is an array of strings (tokens etc) to be matched. $pat is a pattern string (e.g. "example,exemplar"), or an array of pattern strings (that can include wild cards * and ?). When $pat is an array of patterns, a $list item must match every pattern from the array. MatchNames returns an array of the $list items that match the pattern.%0a  MatchPageNames($pagelist, $pat, $caseinsensitive = true) %0a  FixGlob($x, $rep = '$1*.$2') %0a  ResolvePageName($pagename) - "normalizes" a pagename based on the current settings of $DefaultPage and $PagePathFmt. It's normally used during initialization to fix up any missing or partial pagenames.%0a  MakePageName($basepage,$str) - to convert a string $str into a fully-qualified pagename. If $str doesn't contain a group qualifier, then MakePageName uses $basepage and $PagePathFmt to determine the group of the returned pagename.%0a  PCache($pagename, $page)%0a  SetProperty($pagename, $prop, $value, $sep = NULL)%0a  PageVar($pagename, $var, $pn = '')%0a  FmtPageName($fmt, $pagename) - handles $[internationalization] and $Variable substitutions in strings based on the $pagename argument.%0a  XL($key)%0a  XLSDV($lang,$a)%0a  XLPage($lang,$p)%0a  CmpPageAttr($a, $b)%0a  PageStore($d='$WorkDir/$FullName', $w=0)%0a  pagefile($pagename)%0a  read($pagename, $since=0)%0a  write($pagename,$page)%0a  exists($pagename)%0a  delete($pagename)%0a  ls($pats=NULL)%0a  ReadPage($pagename, $since=0) - returns array, each element contains a single line split by '=' to array($key => $value)%0a  WritePage($pagename,$page)%0a  PageExists($pagename)%0a  ListPages($pat=NULL)%0a  RetrieveAuthPage($pagename, $level, $authprompt=true, $since=0) - recieve page by using authentication mechanisms (hookable) ([[PmWiki/Functions#RetrieveAuthPage|reference]])%0a  Abort($msg)%0a  Redirect($pagename,$urlfmt='$PageUrl')%0a  PrintFmt($pagename,$fmt)%0a  PrintWikiPage($pagename, $wikilist=NULL, $auth='read')%0a  Keep($x, $pool=NULL) - the $x string is passed on unaltered to the output%0a  CondText($pagename,$condspec,$condtext)%0a  IncludeText($pagename, $inclspec)%0a  RedirectMarkup($pagename, $opt)%0a  Block($b)%0a  FormatTableRow($x)%0a  WikiLink($pagename, $word)%0a  LinkIMap($pagename,$imap,$path,$title,$txt,$fmt=NULL)%0a  LinkPage($pagename,$imap,$path,$title,$txt,$fmt=NULL)%0a  MakeLink($pagename,$tgt,$txt=NULL,$suffix=NULL,$fmt=NULL) - creates a link with the proper site info, see [[PmWiki/MakeLink]]%0a  [[Functions#Markup|Markup]]($id,$cmd,$pat=NULL,$rep=NULL)%0a  DisableMarkup()%0a  mpcmp($a,$b) { return @strcmp($a['seq'].'=',$b['seq'].'='); }%0a  BuildMarkupRules()%0a  MarkupToHTML($pagename, $text, $opt = NULL)%0a  HandleBrowse($pagename, $auth = 'read')%0a  EditTemplate($pagename, &$page, &$new)%0a  RestorePage($pagename,&$page,&$new,$restore=NULL)%0a  ReplaceOnSave($pagename,&$page,&$new)%0a  SaveAttributes($pagename,&$page,&$new)%0a  PostPage($pagename, &$page, &$new)%0a  PostRecentChanges($pagename,&$page,&$new)%0a  PreviewPage($pagename,&$page,&$new)%0a  HandleEdit($pagename, $auth = 'edit')%0a  HandleSource($pagename, $auth = 'read')%0a  PmWikiAuth($pagename, $level, $authprompt=true, $since=0) - recieve page by using authentication mechanisms%0a  IsAuthorized($chal, $source, &$from)%0a  SessionAuth($pagename, $auth = NULL)%0a  PrintAttrForm($pagename)%0a  HandleAttr($pagename, $auth = 'attr')%0a  HandlePostAttr($pagename, $auth = 'attr')%0a  HandleLogoutA($pagename, $auth = 'read')%0a  HandleLoginA($pagename, $auth = 'login')%0a%0a!! scripts/author.php:%0a  RequireAuthor($pagename, &$page, &$new)%0a%0a!! scripts/authuser.php:%0a  AuthUserId($pagename, $id, $pw=NULL)%0a  AuthUserConfig($pagename, $id, $pw, $pwlist)%0a  AuthUserHtPasswd($pagename, $id, $pw, $pwlist)%0a  AuthUserLDAP($pagename, $id, $pw, $pwlist)%0a  _crypt($plain, $salt=null)%0a%0a!! scripts/compat1x.php:%0a  ConvertV1WikiD($path) is a  that allows pages to be converted%0a  read($pagename)%0a  UseV1WikiD($path)%0a  ConvertV1WikiD($path)%0a%0a!! scripts/crypt.php:%0a  HandleCrypt($pagename, $auth='read')%0a%0a!! scripts/diag.php:%0a  Ruleset()%0a  HandleRuleset($pagename)%0a  StopWatchHTML()%0a%0a!! scripts/draft.php:%0a  EditDraft(&$pagename, &$page, &$new)%0a%0a!! scripts/feeds.php:%0a  HandleFeed($pagename, $auth = 'read')%0a  RSSEnclosure($pagename, &$page, $k)%0a%0a!! scripts/forms.php:%0a  InputMarkup($pagename, $type, $args)%0a%0a!! scripts/guiedit.php:%0a  GUIButtonCode($pagename)%0a%0a!! scripts/httpauth.php:%0a  HTTPBasicAuthPrompt($pagename)%0a%0a!! scripts/notify.php:%0a  NotifyCheck($pagename)%0a  PostNotify($pagename, &$page, &$new)%0a  NotifyUpdate($pagename, $dir='')%0a%0a!! scripts/pagelist.php:%0a  SearchBox($pagename, $opt)%0a  FmtPageList($outfmt, $pagename, $opt)%0a  MakePageList($pagename, $opt, $retpages = 1)%0a  SortPageList(&$matches, $order)%0a  HandleSearchA($pagename, $level = 'read')%0a  FPLTemplate($pagename, &$matches, $opt)%0a  PageIndexTerms($terms) - see $PageIndexTermsFunction%0a  PageIndexUpdate($pagelist, $dir = '')%0a  PageIndexGrep($terms, $invert = false)%0a  PostPageIndex($pagename, &$page, &$new)%0a%0a!! scripts/pagerev.php:%0a  LinkSuppress($pagename,$imap,$path,$title,$txt,$fmt=NULL)%0a  PrintDiff($pagename)%0a  HandleDiff($pagename, $auth='read')%0a%0a!! scripts/phpdiff.php:%0a  PHPDiff($old,$new)%0a%0a!! scripts/simuledit.php:%0a  Merge($newtext,$oldtext,$pagetext)%0a  MergeSimulEdits($pagename,&$page,&$new)%0a%0a!! scripts/skins.php:%0a  SetSkin($pagename, $skin)%0a  LoadPageTemplate($pagename,$tfilefmt)%0a  PrintSkin($pagename, $arg)%0a    Associated with %0a      $PageEndFmt = "function:PrintSkin End"%0a      $PageStartFmt = "function:PrintSkin Start"%0a%0a!! scripts/stdmarkup.php:%0a  PreserveText($sigil, $text, $lead)%0a  PrintMetaTags($pagename, $args)%0a  TrackAnchors($x) { global $SeenAnchor; return @$SeenAnchor[$x]++; }%0a  WSIndent($i)%0a  Cells($name,$attr)%0a  MarkupMarkup($pagename, $text, $opt = '')%0a  CondDate($condparm)%0a%0a!! scripts/trails.php:%0a  ReadTrail($pagename,$trailname)%0a  MakeTrailStop($pagename,$trailname)%0a  MakeTrailStopB($pagename,$trailname)%0a  MakeTrailPath($pagename,$trailname)%0a%0a!! scripts/transition.php:%0a  FPLByGroup($pagename, &$matches, $opt)%0a  GUIEdit($pagename, &$page, &$new)%0a%0a!! scripts/upload.php:%0a  MakeUploadName($pagename,$x)%0a  LinkUpload($pagename, $imap, $path, $title, $txt, $fmt=NULL)%0a  HandleUpload($pagename, $auth = 'upload')%0a  HandleDownload($pagename, $auth = 'read')%0a  HandlePostUpload($pagename, $auth = 'upload')%0a  UploadVerifyBasic($pagename,$uploadfile,$filepath)%0a  dirsize($dir)%0a  FmtUploadList($pagename, $args)%0a  AttachExist($pagename)%0a%0a!! scripts/urlapprove.php:%0a  LinkHTTP($pagename,$imap,$path,$title,$txt,$fmt=NULL)%0a  ReadApprovedUrls($pagename)%0a  HandleApprove($pagename, $auth='edit')%0a  BlockUnapprovedPosts($pagename, &$page, &$new)%0a%0a!! scripts/vardoc.php:%0a  VarLink($pagename,$tgt,$txt)%0a  VarIndexLoad($pagename)%0a  VarIndexList($pagename)%0a%0a!! scripts/wikistyles.php:%0a  ApplyStyles($x)%0a%0a!! scripts/xlpage-utf-8.php:%0a  utf8toupper($x)%0a%0aCategory: [[!PmWiki Internals]] [[!PmWiki Developer]]
time=1672972956
