version=pmwiki-2.3.9 ordered=1 urlencoded=1
author=MFWolff
charset=UTF-8
csum=more hlt html, pm hlt, hlt php (+261)
ctime=1304854414
name=PmWikiDe.SkinTemplates
rev=31
targets=PmWikiDe.Skins,PmWikiDe.LayoutBasics,PmWikiDe.BasicVariables,PmWikiDe.PathVariables,PmWikiDe.LayoutVariables,PmWikiDe.PageVariables,PmWikiDe.PageDirectives,Skins.TestPageDirectives,PmWikiDe.Internationalizations,Cookbook.HideSearchBar
text=(:title Skinvorlagen:)%0a(:Summary: Beschreibung der Skinvorlagen, mit denen die Oberfläche gestaltet wird.:)%0a(:Original_Page: PmWiki.{$Name}:)%0a(:Translation_Date: 2011-05-09:)%0a(:Translation_Status: %25green%25fertig%25%25:)%0a(:Audience: Administratoren (FTP):)%0a%0aDiese Seite beschreibt die Skinvorlagendateien (.tmpl), die benutzt werden, um PmWikis ''Skins'' (Oberflächen) zu erstellen und wie PmWiki sie benutzt.  %0aWie in der [[Skins]]-Seite beschrieben, ist ein Skin eine Sammlung von Dateien, die das Layout von PmWiki-Seiten beschreiben. %0aJedes Skin muss eine Vorlagendatei enthalten, die das Skelett für die Anzeige einer PmWiki-Seite liefert. [-(&rarr; [[LayoutBasics|+]])-]%0a%0a!! Vorlagen finden und behandeln%0a%0aWenn Sie den Wert von $Skin in einer Konfigurationsdatei wie ''@@local/config.php@@'' wie hier setzen,%0a-> %25hlt php%25[@%0a## Benutze das 'Foo'-Skin.%0a$Skin = 'foo';%0a@]%0a%0adann weisen Sie PmWiki an, nach einem Skin mit diesem Namen zu suchen und es zu benutzen. Das Ergebnis der Suche mündet gewöhnlich darin, dass PmWiki eine Vorlagendatei aus dem zugehörigen Skin-Verzeichnis dieses Namens lädt. In diesem Beispiel würde es wahrscheinlich die Datei @@pub/skins/foo/foo.tmpl@@ sein.%0a%0aDer wirkliche Weg, den PmWiki beschreitet, wenn es eine Vorlage sucht, ist wichtig für jene, die ein komplexes Skin entwickeln, deshalb beschreiben wir hier, welche Schritte das sind:%0a%0a>>rframe width=25pct background-color:#eeeeee color:#444455 border:'1px solid #aa6666' margin-left:2em font-size:smaller padding:5px%3c%3c%0a!! [[#security]]Anmerkung zur Sicherheit%0aDer Standardwert für @@[=$=]SkinLibDirs@@ lässt server-seitig und client-seitig Dateien in dem gleichen öffentlich zugänglichen Verzeichnis speichern. Das heißt, @@$SkinDir@@ und @@$SkinDirUrl@@ weisen auf das gleiche Verzeichnis. Das ist für die Bequemlichkeit sowohl der Entwickler der Skins als auch die der Nutzer der Skins so gemacht, aber das muss nicht so sein.%0a%0aEs hat den Seiteneffekt, dass es möglich ist, einen URL zu konstruieren ([[https://www.pmwiki.org/pmwiki/pub/skins/pmwiki/pmwiki.tmpl|wie diesen hier]]), der Ihnen gestattet, den Inhalt der ''@@.tmpl@@''- oder der ''@@.php@@''-Dateien anzusehen, die ein Skin benutzt. Das ist gewöhnlich kein Problem, da Skin-Dateien eigentlich keine sensitiven Daten enthalten.%0a%0aDoch ein Purist möchte vielleicht seine ''@@.tmpl@@''- und seine ''@@.php@@''-Dateien aus den Verzeichnissen verschieben, die als URL erreichbar sind, und ändert sein @@[=$=]SkinLibDirs@@-Array, um das zu berücksichtigen.%0a>>%3c%3c%0a%0a# Wenn @@$PageTemplateFmt@@ leer ist (was es sein sollte), sammelt PmWiki die Namen aller Kandidaten für den Skin. Es startet mit den  aktions-spezifischen Skins, die in @@[[LayoutVariables#ActionSkin|$ActionSkin]][$action]@@ festgelegt sind. Dadurch wird PmWiki nach einem Skin namens 'Bar' sehen, wenn die aktuelle Aktion 'login' ist und @@$ActionSkin['login']@@ = @@'Bar'@@ ist.%0a%0a# Wenn bis dahin noch kein Skin gefunden wurde, sucht es nach dem/den Skin(s), die in der  @@$Skins@@-Variablen genannt sind (@@$Skins@@ darf ein Array sein). Wenn das Ende der Liste erreicht ist, ohne dass ein Skin gefunden wird, meldet es einen Fehler.%0a%0a# Beim Versuch, ein Skin  zu finden, konsultiert PmWiki zuerst die @@[[LayoutVariables#SkinLibDirs|[=$=]SkinLibDirs]]@@-Variable, wo es suchen muss. Skins bestehen aus server-seitigen Dateien (wie .php- und .tmpl-Dateien), die von PmWiki geladen werden und client-seitigen Dateien (wie .css-Dateien und Bildern), die vom Browser der Benutzer angefragt werden, wenn sie eine enthäutete PmWiki-Seite ansehen. @@$SkinLibDirs@@ ist ein Array aus Schlüssel/Wert-Paaren. Der Schlüssel ist ein Verzeichnis, in dem nach server-seitigen Dateien gesehen wird, der zugehörige Wert ist ein URL, der auf die öffentlichen, client-seitigen Recourcen weist, die vom Skin benutzt werden. Der Standardwert von @@[=$=]SkinLibDirs@@ ist:%0a ->%25hlt php%25[@%0a$SkinLibDirs = array(%0a   "./pub/skins/\$Skin"      => "$PubDirUrl/skins/\$Skin",%0a   "$FarmD/pub/skins/\$Skin" => "$FarmPubDirUrl/skins/\$Skin");%0a@]%0a%0aPmWiki würde mit der obigen Definition also das Skin 'foo' zu finden versuchen, indem es nach einem Verzeichnis mit dem Namen @@./pub/skins/foo@@ und dann nach @@$FarmD/pub/skins/foo@@ sieht (wobei der Server @@$FarmD@@ durch das Root-Server-Verzeichnis für die Farm-Dateien ersetzt). Von dem  ersten dieser Verzeichnisse, das gefunden wird, wird angenommen, dass es das gesuchte Skin enthält. Dann wird @@$SkinDir@@ auf den Namen des Verzeichnisses gesetzt und @@$SkinDirUrl@@ auf den zugehörigen URL. %0a%0a#Wenn erst einmal ein gültiges Skin-Verzeichnis gefunden wurde, beginnt PmWiki die Dateien in diesem Verzeichnis abzuarbeiten, indem es nach einer @@.php@@-Skin-Datei sucht, die es ausführen kann. Zuerst sucht es nach einer mit dem gleichen Namen wie das Skin. Bei dem Skin 'foo' sucht es also nach ''@@foo.php@@''. Wenn es eine solche Datei nicht findet, prüft es die Datei ''@@skin.php@@''. Ist eine dieser beiden Dateien gefunden, lädt PmWiki sie und führt sie aus. Das erlaubt einem Skin, eigene Markups oder eigene Konfigurationsparameter zu definieren. Es erlaubt dem Skin auch, zwischen verschiedenen @@.tmpl@@-Dateien eine zum Laden auszusuchen. %0a%0a Um festzulegen, welche @@.tmpl@@-Datei geladen werden soll, ruft man schlicht %25hlt php%25@@LoadPageTemplate()@@ innerhalb der @@skin.php@@-Datei mit dem Namen der @@.tmpl@@-Datei auf, die man laden will.%0a%0a -> %25hlt php%25@@LoadPageTemplate($pagename, "$SkinDir/xyz.tmpl");@@%0a%0a Ein Skin möchte zum Beispiel eine spezielle Vorlage benutzt sehen, wenn die Aktion 'print' ausgeführt wird:%0a%0a -> %25hlt php%25[@%0aif ($GLOBALS['action'] == 'print')%0a  LoadPageTemplate($pagename, "$SkinDir/print.tmpl");%0a@]%0a%0a Wenn es irgend eine der anderen Aktionen ist, fällt PmWiki auf das Laden der Standard-@@.tmpl@@-Datei zurück. %0a%0a#Wenn keine passende @@.php@@-Datei gefunden wurde, oder wenn diese Datei keine Vorlage lädt, dann fällt PmWiki zurück auf die Suche nach einer Vorlage mit dem selben Namen wie das Skin oder, wenn das scheitert, irgend eine @@.tmpl@@-Datei, so lange es die einzige in dem Verzeichnis ist. Wenn es eine findet, wird diese geladen und ausgeführt. Wenn nicht, wird ein Fehler gemeldet. %0a%0a!![[#fileformat]]Vorlagendateiformat%0a%0aEine Vorlagendatei ist im Grunde genommen eine HTML-Datei, die auch Variablenersetzungen enthält (erkennbar am '$') und spezielle Direktiven, eingebettet in HTML-Kommentare. Die folgenden Direktiven sind notwendig in der Vorlagendatei:%0a# Die Direktive %25hlt html%25[@%3c!--PageText-->@] gehört zum %3cbody>-Abschnitt des HTML-Dokuments und weist PmWiki an, wohin der Hauptinhalt der Wikiseiten gehört.%0a# Die Direktive %25hlt html%25[@%3c!--HTMLHeader-->@], die in den %3chead>-Abschnitt des HTML-Dokuments gehört.%0a# Die Direktive %25hlt html%25[@%3c!--HTMLFooter-->@], die typischerweise kurz vor dem schließenden %3c/body-Tag steht und von einigen Rezepten benutzt wird, um Dinge am Ende des HTML-Dokuments einzufügen. %25note%25[-Vor PmWiki 2.2.0 war die %25hlt html%25[@%3c!--HTMLFooter-->@]-Direktive optional.-]%0a%0aWenn PmWiki eine Seite anzeigt, ersetzt es die Direktiven und Variablenersetzungen mit den zu dieser aktuellen Seite gehörenden Werten. Zum Beispiel wird die %25hlt html%25[@%3c"--PageText-->@]-Direktive durch den Seiteninhalt ersetzt, während alle Vorkommen von $PageUrl durch den URL (die Adresse) der aktuellen Seite ersetzt werden.%0a%0a%25note%25 Anmerkung: Ihre Skinvorlage sollte kein @@%3cmeta&nbsp;/>@@-Tag enthalten, das den Zeichensatz (encoding) festlegt, da PmWiki dieses Tag hinzufügt, wenn es nötig ist.%0a%0aEs gibt eine lange Liste von Variablen, die für die Ersetzungen in Seiten zur Verfügung stehen, %0azu den gebräuchlichsten gehören:%0a-> [@%0a$PageUrl         der URL der aktuellen Seite%0a$ScriptUrl       der Basis-Url zum PHP-Skript%0a$Title           der Seitentitel (z. B. "SkinTemplates")%0a$Titlespaced     der Seitentitel mit Leerzeichen (e.g., "Skin Templates")%0a$Group           der Name der aktuellen Gruppe (e.g., "PmWiki")%0a$FullName        der volle Name der Seite (e.g., "PmWiki.SkinTemplates")%0a$LastModified    die letzte Änderungszeit der Seite%0a$PageLogoUrl     der URL des Logo der Site%0a$WikiTitle       der Titel der Site%0a$SkinDirUrl      der URL des Skin-Verzeichnisses%0a@]%0a%0aDiese letzte Variable, @@$SkinDirUrl@@, ist in Vorlagen besonders nützlich, da sie den Skindesignern erlaubt, auf andere Dateien (wie Bilder oder Stylesheets) im Skinverzeichnis zu verweisen, ohne den genauen URL zu kennen.%0a%0aDie Vorlage ist nicht auf die Variablen beschränkt, die hier aufgelistet sind, nahezu jede globale PHP-Variable, die mit einem Großbuchstaben beginnt, kann in einer Skin-Vorlage eingesetzt werden. Auch [[Page variables|+]] können in einer Vorlage benutzt werden.%0a%0a%0a!! [[#directives]]Skin-Direktiven%0a%0aNeben den notwendigen %25hlt html%25[@%3c!--PageText-->@]- und [@%3c!--HTMLHeader-->@]-Direktiven stellt PmWiki andere eingebaute Direktiven zum Erzeugen der Ausgabe zur Verfügung. Es ist nicht notwendig, auch nur eine davon einzusetzen, aber sie können oft die Möglichkeiten der Skins erweitern.%0a%0a:%25hlt html%25[@%3c!--wiki:Main.EineSeite-->@]:%0a:%25hlt html%25[@%3c!--page:Main.EineSeite-->@]:%0a: :Die %25hlt html%25[@%3c!--wiki:Main.EineSeite-->@]-Direktive gibt den Inhalt der Seite @@Main.EineSeite@@ aus. $-Ersetzungen sind in Direktiven erlaubt, also wird eine Direktive wie [@%3c!--wiki:$Gruppe.EineSeite-->@] "@@EineSeite@@" aus der aktuellen Gruppe einfügen.%0a%0a: : Wenn mehrere Seiten in der Direktive aufgelistet sind, wird diejenige benutzt, die zuerst gefunden wird. Also wird %25hlt html%25[@%3c!--wiki:$Gruppe.EineSeite Site.EineSeite-->@] @@EineSeite@@ aus der aktuellen Gruppe ausgeben, wenn die Seite existiert, andernfalls @@Site.EineSeite@@. Wenn @@Site.EineSeite@@ immer ausgegeben werden soll, sogar, wenn @@$Gruppe.EineSeite@@ existiert, muss man zwei aufeinanderfolgende [@%3c!--wiki:...-->@]-Direktive, für jede Seite eine, einsetzen.%0a%0a: : Die %25hlt html%25[@%3c!--wiki:...-->@]-Direktive zeigt nur Seiten an, für die der Browser Leserechte hat, die [@%3c!--page:...-->@]-Direktive zeigt die Seite auch dann an, wenn der Browser kein Leserecht für diese Seite hat.%0a%0a:%25hlt html%25[@%3c!--file:einedatei.txt-->@]:%0a: : Die %25hlt html%25[@%3c!--file:einedatei.txt-->@]-Direktive gibt den Inhalt einer anderen Datei aus (aus dem lokalen Dateisystem des Servers) an der Stelle, an der die Direktive steht. Wenn die einzufügende Datei ein .php-Skript ist, wird das PHP-Skript ausgeführt und seine Ausgabe an den Browser geschickt.%0a%0a: :Wie in der [@%3c!--wiki:...-->@]-Direktive oben machen es $-Ersetzungen möglich, Dateien auf der Basis der aktuellen Gruppe oder des Namens der aktuellen Datei auszugeben.%0a%0a:%25hlt html%25[@%3c!--markup:...-->@]:%0a: : Die Markup-Direktive bearbeitet jeden Text, der auf den Doppelpunkt folgt, als Wikiquelltext und zeigt das Ergebnis der Bearbeitung an.%0a%0a:%25hlt html%25[@%3c!--function:EineFunktion args-->@]:%0a: :Diese Direktive ruft eine PHP-Funktion namens "@@EineFunktion@@" auf und übergibt ''den Namen der aktuellen Seite'' als erstes Argument und den optionalen ''Text hinter dem Funktionsnamen'' als zweites Argument. PHP-Funktionen, die auf diese Weise aufgerufen werden, sind typischerweise in einer lokalen Anpassungsdatei definiert. Args erlaubt nur ein Argument, das dann in Ihrer Funktion zerlegt werden muss. [@%3c!--function:EineFunktion arg1 arg2 arg3-->@] ruft %25hlt php%25[@EineFunktion($pagename, "arg1 arg2 arg3")@] auf, wenn die Vorlage abgearbeitet wird. Indes können dabei auch Variablen (wie $LastModifiedBy) eingesetzt werden.%0a%0a%0a:%25hlt html%25[@%3c!--IncludeTemplate: header.tmpl-->@]:%0a:%25hlt html%25[@%3c!--IncludeTemplate: {$Group}.tmpl default.tmpl-->@]:%0a: : Diese Direktive erlaubt das Einschließen einer weiteren Vorlagendatei. Die Argumente sind Dateinamen im Verzeichnis 'skins', die erste gefundene Datei wird dann in die Hauptvorlage eingefügt. Dieses Feature gibt es seit der Version 2.2.114, es ist aber per Voreinstellung deaktiviert; es muss in Ihrer Skinvorlagedatei ''@@pub/skins/mein-skin/mein-skin.php@@'' durch die Zeile %25hlt php%25@@SDV($GLOBALS['SkinTemplateIncludeLevel'], 1);@@ aktiviert werden, wobei 1 die Anzahl der erlaubten Level ist, d.&nbsp;h. wenn eine eingeschlossene Vorlage ebenfalls eine @@IncludeTemplate@@-Direktive enthält, setzen Sie diese Zahl auf 2, bis zu einem Maximum von 10. %0a%0a!![[#sections]] Seitenabschnitte%0a%0aEine Vorlagendatei kann "Abschnitte" enthalten, die in die Ausgabe eingeschlossen oder von ihr ausgeschlossen werden auf der Basis von [[page directives|Seitendirektiven]] oder anderen Kriterien. Ein Abschnitt beginnt immer mit %25hlt html%25[@%3c!--Page...Fmt-->@] und geht bis zum nächsten Abschnitt, dem Ende der Vorlagendatei oder [@%3c!--/Page...Fmt-->@]. Eine Vorlage kann zum Beispiel einen [@%3c!--PageLeftFmt-->@]-Abschnitt angeben, der immer dann von der Ausgabe ausgeschlossen wird, wenn die %25pmhlt%25[@(:noleft:)@]-Direktive in dem Seiteninhalt auftaucht. %0aPmWikis vordefinierte Abschnitte (und ihre zugehörigen Seitendirektiven) sind:%0a>>pre%3c%3c%0a-> %25hlt html%25[@%3c!--PageHeaderFmt-->@]          %25pmhlt%25[@(:noheader:)@]%0a-> %25hlt html%25[@%3c!--PageFooterFmt-->@]          %25pmhlt%25[@(:nofooter:)@]%0a-> %25hlt html%25[@%3c!--PageTitleFmt--> @]          %25pmhlt%25[@(:notitle:)@]%0a-> %25hlt html%25[@%3c!--PageLeftFmt-->  @]          %25pmhlt%25[@(:noleft:)@]%0a-> %25hlt html%25[@%3c!--PageRightFmt--> @]          %25pmhlt%25[@(:noright:)@]%0a-> %25hlt html%25[@%3c!--PageActionFmt-->@]          %25pmhlt%25[@(:noaction:)@]%0a>>%3c%3c%0a%0aSkindesigner können eigene Abschnitte und Markups definieren, aber zur Zeit müssen alle Abschnittnamen mit 'Page' beginnen und auf 'Fmt' enden. Wie erwähnt müssen Sie dazu auch ein entsprechendes Markup (zum Beispiel in der ''@@config.php@@''-Datei) definieren:%0a%0a->%25hlt php%25[@Markup('noxyz', 'directives',  '/\\(:noxyz:\\)/i',%0a  "HideXYZ");%0afunction HideXYZ() {%0a  SetTmplDisplay('PageXYZFmt',0);%0a}@]%0a%0aHinweis: Das Rezept Skins:TestPageDirectives kann Ihnen helfen, Ihre Skins mit einer Kombination der obigen Direktiven zu testen.%0a%0a%0a!![[#i18n]] Internationalisierung (i18n)[[#Internationalization]]%0a%0aSkins können Sie auch [[internationali(zations)]]sieren, indem Sie %25pmhtl%25[@$[...]@]-Ersetzungen benutzen. Jeder String, der innerhalb von [@$[...]@] geschrieben wird, wird als übersetzbare Wendung behandelt. Die Wendung wird in der aktuellen Übersetzungstabelle nachgesehen und ggf. durch den passenden Ausgabetext ersetzt. Gibt es keine Übersetzung, wird die Originalwendung unverändert übernommen.%0a%0aBeispielsweise wird die Ersetzung [@$[Edit]@] durch die vorhandene Übersetzung von "Edit" ersetzt, wenn eine bekannt ist, sonst wird "Edit" ausgegeben. So kann die gleiche Vorlage für verschiedene Sprachen benutzt werden, weil z. B. an der Stelle "Editer" angezeigt wird, wenn eine französische Übersetzungstabelle vorliegt, "Bearbeiten" bei einer deutschen und "Edit", wenn es keine Übersetzung gibt.%0a%0a!!FAQ%0a>>faq%3c%3c [[#faq]]%0a%0aQ: Wie passe ich die CSS-Stile für mein PmWiki-Layout an. [[#customcss]]%0a%0aA: Sehen Sie unter [[Skins]] nach, wie Sie das Standardwikiskin verändern können. Siehe auch unter [[https://www.pmwiki.org/wiki/Skins/Skins|Skins]], wo weitere vorgefertigte Skins zu finden sind, die man benutzen kann, um das Aussehen der eigenen Site seinem eigenen Geschmack anzupassen. Sie können auch eine Datei ''@@local.css@@'' im ''pub/css''-Verzeichnis erstellen, um die CSS-Selektoren dort hinzuzufügen (diese Datei wird automatisch eingebunden, wenn sie existiert). Oder Sie fügen Stile direkt in Ihrer lokalen Anpassungsdatei hinzu, indem Sie etwas Folgendes schreiben:%0a%0a-> %25hlt php%25[@$HTMLStylesFmt[] = '.foo { color:blue; }';@]%0a%0aQ: Wo findet man die erwähnte Übersetzungstabelle, so dass man Übersetzungswendungen hinzufügen kann?%0a%0aA: Siehe unter [[Internationalizations|+]].%0a%0aQ: Ist es möglich, ein Bearbeiten-Formular über die ganze Fensterbreite zu bekommen ohne die SideBar?%0a%0aA: Wenn die SideBar mit %25hlt html%25[@%3c!--PageLeftFmt-->@] markiert ist, fügt man %25pmhlt%25[@(:noleft:)@] in die Seite Site.EditForm ein. Das versteckt die SideBar beim Bearbeiten.%0a%0aQ: Kann man den Titel der Startseite ("HomePage") einfach von der Startseite entfernen/verbergen?%0a%0aA: Ja, man kann in der Wikiseite den Titel auf %25pmhlt%25@@[=(:title Ein besserer Titel:)=]@@ ändern oder mit @@[=(:notitle:)=]@@ unterdrücken.%0a%0aQ: Ist es möglich, die Search-Bar in dem Standardskin von PmWiki zu verbergen?%0a%0aA: Ja, siehe bitte unter [[Cookbook:HideSearchBar]].%0a[[#faqend]]%0a>>%3c%3c%0a
time=1660986440
title=Skinvorlagen
