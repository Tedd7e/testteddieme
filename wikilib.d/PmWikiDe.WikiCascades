version=pmwiki-2.3.9 ordered=1 urlencoded=1
author=MFWolff
charset=UTF-8
csum=http+s, hlt php (+25)
ctime=1380291441
name=PmWikiDe.WikiCascades
rev=3
targets=PmWikiDe.LocalCustomizations,PmWikiDe.BasicVariables,PmWikiDe.Passwords,PmWikiDe.SecurityVariables,PmWikiDe.SkinTemplates,PmWikiDe.WikiStyles,PmWikiDe.GroupCustomizations,PmWikiDe.InitialSetupTasks
text=(:title Wiki-Kaskaden:)%0a(:Summary: Reihenfolge in der Bearbeitung des Wikiquelltextes:)%0a(:Original_Page: PmWiki.{$Name}:)%0a(:Audience: Administratoren, Entwickler:)%0a(:Translation_Date: 2013-09-27:)%0a(:Translation_Status: %25green%25fertig%25%25:)%0a%0aPmWiki nutzt eine Reihe von %25newwin%25[["Kaskaden" -> https://w3.org/TR/REC-CSS2/cascade.html]] im Zusammenhang mit den Deklarationen. Kenntnisse darüber können nützlich sein für Jemanden, der Probleme durch Entwanzen (debugging) einkreist oder neue Rezepte schreibt.%0a%0a!! [[Local customizations|+]]%0a%0aWenn @@pmwiki.php@@ ausgeführt wird, initialisiert es einige Variablen und lädt dann (via %25hlt php%25@@include_once()@@) eine Sequenz von PHP-Skripten, die lokale Anpassungen ausführen können. Hier ist die Basis-Sequenz, in der die lokalen Anpassungen geladen werden:%0a%0a->[@%0apmwiki.php%0a  $FarmD/local/farmconfig.php        # farm-weite Einstellungen%0a  local/config.php                   # Wiki-Einstellungen%0a  local/$Group.$Name.php             # seitenbezogene Einstellungen%0a  local/$Group.php                   # gruppenbezogene Einstellungen%0a@]%0a%0aEs scheint eigenartig zu sein, dass die seitenbezogenen Einstellungen vor den gruppenbezogenen Einstellungen geladen werden. Jedenfalls sollten die seitenbezogenen Einstellungen mehr Gewicht haben als gruppenbezogene Einstellungen, und es ist ''viel'' leichter für die seitenbezogene Datei, die gruppenbezogene Datei am Laden zu hindern (indem $EnablePGCust = 0 gesetzt wird), als die gruppenbezogene Datei zuerst zu laden und in der seitenbezogenen Datei zu versuchen, diese Einstellungen rückgängig zu machen. %0a%0aWenn die seitenbezogene Datei die gruppenbezogenen Einstellungen zuerst laden möchte, kann sie es mit Hilfe von%25hlt php%25 [@include_once('local/Group.php')@] tun.%0a%0a%0a!! [[Passwords|+]]%0a%0aEs gibt viele verschiedene Modelle für die Seitenautorisierung und PmWikis eingebaute Autorisierung versucht möglichst viele von ihnen zusammenzufassen. Im Ergebnis gibt es eine Reihe von Kaskaden im Zusammenhang mit der Autorisierung des Zugriffs auf eine Seite.%0a%0aZunächst sind da fünf Autorisierungsebenen in PmWikis Standardauslieferung: read, edit, attr, upload, und admin.%0a%0aWenn PmWiki eine bestimmte Ebene (z.&nbsp;B. 'edit') zu autorisieren versucht, nutzt es die erste (und nur die erste) assoziierte Passworteinstellung,  die es findet, von:%0a%0a    seitenbezogenen Passwörtern       # gesetzt durch ?action=attr in einer Seite%0a    gruppenbezogenen Passwörtern      # gesetzt durch ?action=attr in `GroupAttributes%0a    voreingestellten Passwörtern      # gesetzt durch $DefaultPasswords[...]%0a%0aSo überschreibt das Seitenpasswort das Gruppenpasswort und das Gruppenpasswort überschreibt die site-weiten (Standard-)Passwörter.%0a%0aWenn die obige Kaskade keine Passworteinstellung für die erforderliche Ebene ergibt, wird PmWiki durch die Autorisierungsebenen (wie sie durch $AuthCascade gesetzt sind) kaskadieren:%0a%0a->[@%0aedit %3c= read%0aupload %3c= read%0aattr %3c= edit%0a@]%0a%0aDiese Kaskade zeigt an, dass eine Seite ohne ein ausdrückliches Passwort das erstbeste vorhandene read-Passwort benutzt. Ähnlich benutzt eine Seite ohne attr-Passwort stattdessen das edit-Passwort. Das Endergebnis dieser Kaskade ist, dass stillschweigend das erstbeste read-Passwort benutzt wird, wenn kein edit- oder upload-Password vorhanden ist, und das edit-Passwort wird benutzt, wenn kein attr-Passwort vorhanden ist.%0a%0aDas admin-Passwort nimmt an dieser Kaskade nicht wirklich teil &ndash; das admin-Passwort gewährt den Zugriff unabhängig von jeglichem gesetzten Passwort.%0a%0a!!CSS%0a%0aDas Look-and-feel einer Wikiseite wird zunächst durch die [[PmWikiDe/SkinTemplates|+]][=-=]Datei bestimmt. Cascading Style Sheets (CSS) liefern dann die Formatierungen.%0a%0aDie Style-Sheet-Kaskade arbeitet wie folgt (eine vereinfachte Erklärung))'^[[http://www.devarticles.com/c/a/Web-Style-Sheets/Learn-CSS-Introduction-to-Inheritance-Specificity-and-Cascade/|#]]^'. %0aWo es mehrere CSS-Regeln gibt, wird die benutzt, die zuletzt kommt. CSS-Dateien sind also umso wichtiger, je später sie geladen werden.%0aAllerdings werden die Inline-Styles generell als die wichtigsten angesehen und haben letztendlich das Sagen.%0aDeshalb sollten CSS-Anweisungen für Rezepte grundsätzlich in Dateien ausgeliefert werden anstatt inline, damit Webmaster sie einfacher anpassen können.%0a%0aDie folgende Liste zeigt die 'Wichtigkeit' von CSS-Quellen auf, aber es sollte angemerkt werden, dass die CSS-Quellen tatsächlich von unten nach oben abgearbeitet werden.%0a# inline-CSS (z.&nbsp;B. im Header oder durch [[wiki styles|+]] erzeugt)%0a# pmwiki.css (gefunden im gleichen Verzeichnis wie die Vorlagen-Datei .tmpl)%0a# ''gruppenname.seitenname.css'' (gefunden in ''/pub/css)'', wobei sich ''seitenname'' auf eine bestimmte Seite in einer bestimmten Gruppe ''gruppenname'' bezieht%0a# ''gruppenname.css'' (gefunden in ''/pub/css''), wobei ''gruppenname'' auf alle Seiten in einer bestimmten Gruppe passt, siehe [[group customizations|+]]%0a# local.css (gefunden in ''/pub/css''), siehe [[initial setup tasks|+]] %0a%0a
time=1660978204
title=Wiki-Kaskaden
