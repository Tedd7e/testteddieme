version=pmwiki-2.2.98 ordered=1 urlencoded=1
author=Sven
charset=UTF-8
csum=Clarify that end marker stop at start of line is expected behavior.
ctime=1498359434
name=PmWiki.PageSections
rev=8
targets=PmWiki.Links,PmWiki.IncludeOtherPages,PmWiki.Functions,PmWiki.ConditionalMarkup,Test.ExoticSectionNames
text=(:Summary: The PmWiki-internal effects of anchors: They divide a page into sections.:)%0a%0a(:comment Intro section serves as Links#anchors abstract.:)%0a[[#sectionsintro]]\%0aWhile in HTML the purpose of [[(Links#)anchors]] is mostly for jumping to a position in the text,%0ain PmWiki they serve an internal purpose, too:%0aEach anchor also creates a ''section'', because sections are defined as%0athe part of the page between their start anchor and the next anchor.%0a[[#sectionsintro-end]]\%0aA ''section name'' is defined as the name of its start anchor.%0a%0aUsage scenarios for sections include:%0a%0a* To [[include parts of a page -> IncludeOtherPages]] in another one or in itself.%0a* Easy retrieval of parts of a page in PHP, using the @@[[(Functions#)RetrieveAuthSection]]()@@ function.%0a* Re-use them as templates with [[include variables -> IncludeOtherPages#includevariable]] for dynamic parts.%0a** In blocks of [[conditional markup]], you can defer interpretation of markup that would usually be parsed before the conditions. One way to achieve this is to interrupt the early markup's keyword by putting a bogus include variable in its middle, thus making it some invalid garbage. If the conditions are met to trigger your include command, then the section with the deactivated markup will be interpreted once again, but only after the include variables are replaced. Since your bogus variable has no text, it will just disappear, so this time it won't invalidate the early markup.%0a%0a%25green%25Rules for valid section names%25%25 are by definition the same as for anchors (described in [[Links#anchors]]),%0abut in practice there are some additional limitations:%0a%0a* If the name ends in more than one dot, the @@([=:include:=])@@ command and @@[[(Functions#)RetrieveAuthSection]]()@@ can use it as an end anchor but not as a start anchor.%0a%0aYou can try some experiments on the [[Test.ExoticSectionNames]] page or even just its preview.%0a%0a%25red%25Beware of subtle differences:%0a%0a* If an anchor in the middle of a line is used as start anchor for the @@([=:include:=])@@ command, it reads from the beginning of the line that has the anchor and will include the @@[=[[#anchor]]=]@@ markup, which results in an HTML anchor being generated.%0a* In comparison, @@[[(Functions#)RetrieveAuthSection]]()@@ will start reading text from exactly after the mid-line start anchor.%0a* When using an anchor in the middle of a line as end anchor though, @@[[(Functions#)RetrieveAuthSection]]()@@ behaves the same as the @@([=:include:=])@@ command, about which [[Include Other Pages]] warns: It will stop reading at the beginning of the line that has the end anchor, so the last thing included will be the end of line character from the line before the end marker.%0a** To avoid the final EOL produce whitespace behind your @@([=:include:=])@@ command, end the line before the end anchor with a line joiner (backslash).%0a%0a%0a%0a%0a
time=1498360751
