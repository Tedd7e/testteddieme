version=pmwiki-2.3.23 ordered=1 urlencoded=1
author=MFWolff
charset=UTF-8
csum=Add InsertEditFunction() (+922)
ctime=1162888231
name=PmWikiDe.Functions
rev=83
targets=Cookbook.Functions,PmWikiDe.CustomMarkup,PmWikiDe.CustomActions,PmWikiDe.BasicVariables,PmWikiDe.LayoutVariables,PmWikiDe.Forms,PmWikiDe.SecurityVariables,Cookbook.PccfToPcfOverride,PmWikiDe.LinkVariables,PmWikiDe.OtherVariables,PmWikiDe.EditVariables,PmWikiDe.UploadVariables,PmWikiDe.Functions,PmWikiDe.Variables,PmWikiDe.Internationalizations,PmWikiDe.FmtPageName,PmWikiDe.MakeLink,PmWikiDe.ConditionalMarkup,PmWikiDe.Drafts,PmWikiDe.IncludeOtherPages,PmWikiDe.UpdatePage,Cookbook.MarkupExpressionSamples,Cookbook.ParseArgs,Category.PmWikiDeveloper,!PmWikiDeveloper
text=(:title Funktionen:)%0a(:Summary: Beschreibung verschiedener innerer Funktionen und deren Arbeitsweise:)%0a(:Original_Page: PmWiki.{$Name}:)%0a(:Translation_Date: 2011-05-05:)%0a(:Translation_Status: %25green%25fertig%25%25:)%0a(:Audience: Administratoren (Fortgeschritten), Entwickler:)%0a%0aDiese Seite erklärt einiges der inneren Arbeit von PmWiki, indem sie erklärt, wie einige der Funktionen in PmWiki arbeiten. Wegen einer kürzeren Liste/Übersicht, die zum Beispiel für Rezepteschreiber nützlich ist, siehe Cookbook:Functions. %0a%0aVersichern Sie sich, dass alle relevanten internen Variablen korrekt initialisiert worden sind, wenn Sie diese Funktionen nutzen. Siehe [[Custom Markup|+]] und [[Custom Actions|+]] wegen weiterer Informationen darüber, wie diese Funktionen typischerweise von %25hlt php%25[@Markup()@] oder [@$HandleActions[]@] aufgerufen werden.%0a%0a%0a!! [[#PSFT]] PSFT()%0a%25hlt php%25[@PSFT($format, $timestamp=null, $locale=null, $tz=null)@]%0a%0aDie %25hlt php%25@@PSFT()@@-Function (''PmWiki String Format Time'', hinzugefügt in 2.3.0) soll ein sicherer Ersatz für die sehr verbreitet benutzten PHP-Funktionen @@[[https://www.php.net/strftime|strftime()]]@@ und @@[[https://www.php.net/gmstrftime|gmtstrftime()]]@@ sein, die in PHP 8.1 missbilligt werden.  %0a%0aAnders als %25hlt php%25@@strftime()@@ akzeptiert @@PSFT()@@ zwei weitere Argumente, @@$locale@@ und @@$tz@@, die es erlauben, eine andere Sprache oder Zeitzone einzustellen.%0a%0aPmWiki 2.3.0 benutzt diese Funktion in allen Fällen, wo es davor %25hlt php%25@@strftime()@@ benutzt hatte, einschließlich des%25pmhlt%25 [@{(ftime)}@]-Markup-Ausdrucks. Wenn Ihre lokale Anpassung und Ihre Rezepte  %25hlt php%25@@strftime()@@ benutzen, sollten Sie alle Aufrufe von @@strftime()@@ sicher durch @@PSFT()@@ ersetzen können, ohne die Argumente zu ändern. Jeglicher Aufruf von @@gmtstrftime($fmt, $stamp)@@ kann durch @@PSFT($fmt, $stamp, null, 'GMT')@@ ersetzt werden.%0a%0aDie alten Funktionen werden von den PHP-Entwicklern missbilligt, weil sie Inkonsistenzen auf verschiedenen Plattformen verursacht haben und abhängig von den installierten 'system locales' waren (d.&nbsp;h. eine Sprache funktionierte nur, wenn das System deren 'locale' installiert hatte). Die neue Funktion benutzt die PHP-Klasse [[https://www.php.net/manual/en/class.intldateformatter.php|IntlDateFormatter]] und sollte besser sein. Unglücklicherweise ist sie nicht von allen Providern aktiviert. %0a%0aEine spezielle Sprache ist also &ndash; abhängig von ihrer Installation &ndash; verfügbar mit %25hlt php%25@@strftime()@@ und/oder mit @@IntlDateFormatter@@.%0a%0aAußerdem verhalten sich einige selten benutzte (abkürzende) Prozent-Formate [@%25c, %25x, %25X@] auf verschiedenen Platformen inkonsistent und der neue Formatierer könnte etwas unterschiedliche Ausgaben zeigen. Sie können jederzeit diese Abkürzungen durch die ausführlichen Formatangaben ersetzen, die die gewünschten Ausgaben erzeugen.%0a%0aAus diesem Grund ist%25hlt php%25 @@PSFT()@@ derzeit ein Kompromiss, der standardmäßig @@strftime()@@ für PHP 8.0 oder früher weiterbenutzt. Wenn Sie ihre @@strftime()@@-Aufrufe updaten, sollten das keine Änderungen in Ihrer Ausgabe ergeben.%0a%0aSie können in der ''@@config.php@@''-Datei die Variable%25hlt php%25 @@$EnableFTimeNew = 1;@@ setzen für @@PSFT()@@, um zu versuchen, @@IntlDateFormatter@@ vor PHP 8.1 zu benutzen. Wenn IntlDateFormatter nicht verfügbar ist, werden die Tages- und Monatsnamen in Englisch ausgegeben. Testen Sie, was funktioniert. %0a%0aDa die %25hlt php%25@@strftime()@@-Funktion missbilligt ist, ist es unwahrscheinlich, dass neue Formate hinzukommen. Wir haben zwei eigene Formate hinzugefügt:%0a* [@%25o@] für das "ordinale Suffix" des Datums wie "st" in " January 1st". Wenn @@IntlDateFormatter@@ nicht verfügbar ist, wird der Suffix in Englisch angezeigt.%0a* [@%25L@] für einen von Menschen lesbaren Zeitstempel des Formats %25pmhlt%25[@@2022-09-25T11:49:08Z@]%25%25, das formatiert angezeigt wird entweder aös $TimeFmt oder in der lokalen Zeitzone des Besuchers, siehe $EnableLocalTimes. %0a%0a>>frame%3c%3c%0aEin Unterschied zwischen%25hlt php%25 @@strftime($format, $stamp)@@ und @@PSFT($format, $stamp)@@ ist, wie sie ein falsches, leeres oder nicht-numerisches  @@$stamp@@-Argument behandeln.%0a|| class=simpletable%0a||! @@$stamp@@ argument ||! @@strftime($format, $stamp)@@ ||! @@PSFT($format, $stamp)@@ ||%0a|| numeric              || the stamp     || the stamp     ||%0a|| missing or ''null''  || current time  || current time  ||%0a|| ''false''            || 1970-01-01    || current time  ||%0a|| "" (empty string) \\%0aother non-numeric   || 1970-01-01 or ''false'' (older PHP versions) \\%0a ''Warning: TypeError'' (PHP 7.4+)  || current time ||%0aFür PmWiki scheint es vernünftig zu sein, leere Strings und andere nicht-numerische Werte als die aktuelle Zeit zu behandeln. Wenn Ihre %25hlt php%25@@stamp@@-Variable leer  oder ''false'' sein könnte, und ihr Rezept verlässt sich darauf, dass @@strftime()@@ "1970-01-01" zurück liefert, sollten Sie den Zeitstempel in eine Ganzzahl umwandeln:%0a%25hlt php%25[@%0a  PSFT($format, intval($stamp));%0a@]%0a>>%3c%3c%0a%0a!! [[#pmtoken]] pmtoken()%0a%25hlt php%25[@pmtoken($check = 0, $abort = false)@]%0a%0aDie %25hlt php%25@@pmtoken()@@-Funktion setzt oder prüft einen einmaligen Session-Identifier für den Gebrauch in Eingabeformularen mit dem Ziel, 'cross-site request forgeries' (etwa Website-übergreifende Anfragenfälschung, CSRF) zu verhindern.%0a%0aDer Aufruf von %25hlt php%25@@pmtoken()@@ oder @@pmtoken(0)@@ erzeugt ein Token, wenn das nicht existiert, speichert es im @@$_SESSION@@-Array und gibt es zurück. Er setzt außerdem die Variablen [@$FmtV['$TokenValue']@], die man in HTML-Vorlagen benutzen kann, und [@$InputValues['pmtoken']@], die man in Markup-Formularen ([[forms|+]]) benutzen kann, obwohl es einfacher sein kann, stattdessen %25pmhlt%25[@(:input pmtoken:)@] zu benutzen.%0a%0aDer Name des Input-Elements, standardmäßig 'pmtoken', kann verändert werden durch zum Beispiel das Setzen von %25hlt php%25[@$FmtV['$TokenName'] = 'CSRFtoken';@].%0a%0aDer Aufruf von  %25hlt php%25@@pmtoken(1)@@ prüft den @@$_POST['pmtoken']@@-Wert und gibt wahr zurück, wenn er gültig ist.%0a%0aDer Aufruf von %25hlt php%25@@pmtoken(2)@@ prüft den @@$_GET['pmtoken']@@-Wert und gibt wahr zurück, wenn er gültig ist.%0a%0aDer Aufruf von %25hlt php%25@@pmtoken(1, true)@@ or @@pmtoken(2, true)@@ mit einem zweiten wahren Argument und einem ungültigen Token wird direkt @@Abort()@@ aufrufen und enden. %0a%0a!! [[#pmcrypt]]pmcrypt()%0a%25hlt php%25 [@pmcrypt($password, $salt = null)@]%0a%0aDie %25hlt php%25@@pmcrypt()@@-Funktion ist dazu gedacht, einen sicheren Ersatz für die [[https://www.php.net/crypt|PHP 5.6+ crypt()-Funktion]] zu bieten, wenn man kein $salt einsetzt, was sonst eine Warnmeldung (notice) hervorrufen würde. Wenn ein $salt angegeben wird, wird crypt() aufgerufen, um ein existierendes Passwort zu prüfen. Wenn ein $salt nicht angegeben wird, wird [[https://www.php.net/password_hash|password_hash()]] aufgerufen, um ein kryptografisch starkes Passwort zu erzeugen.%0a%0a%0a!! [[#pmsetcookie]] pmsetcookie()%0a%25hlt php%25[@pmsetcookie($name, $val="", $exp=0, $path="", $dom="", $secure=null, $httponly=null)@]%0a%0aDiese Funktion ist gedacht als Ersatz für [[https://www.php.net/setcookie|setcookie()]]. Sie setzt die $secure- und $httponly-Argumente, wenn sie nicht von der aufrufenden Funktion gesetzt werden und wenn $EnableCookieSecure und $EnableCookieHTTPOnly aktiviert sind.%0a%0a%0a!![[#PCCF]] PCCF() %25red%25 Missbilligt seit PHP 7.2%25%25%0a%25hlt php%25[@PCCF($php_code, $callback_template='default', $callback_arguments = '$m')@] %0a%0aDie %25hlt php%25@@PCCF()@@-Funktion (''PmWiki Create Callback Function'') kann man einsetzen, um Callback-Funktionen zu erzeugen, die man mit [[https://www.php.net/preg_replace_callback|preg_replace_callback]] einsetzt. Sie ist nötig für PHP 5.5., funktioniert aber auch bei früheren Versionen.%0a%0aDas erste Element ist der auszuwertende PHP-Kode.%0a%0aDas zweite Element (optional) ist die Callback-Vorlage, ein Schlüssel aus dem globalen @@$CallbackFnTemplates-Array@@. Es gibt zwei Vorlagen, die Rezepte-Autoren nutzen können%0a*'default' übergibt den @@$php_code@@ als einen Funktionskode%0a*'return' packt @@$php_code@@ als "@@return $php_code;@@" ein (seit PmWiki 2.2.62)%0a%0aDas dritte Argument (optional) ist das Argument der Callback-Funktion. Beachten Sie, dass PmWiki das '$m'-Argument heranzieht, um Übereinstimmungen mit regulären Ausdrücken zu übergeben, Ihre Funktion kann aber auch eigene Argumente benutzen.%0a%0a%25hlt php%25@@PCCF()@@ erzeugt eine anonyme (Lambda-)Funktion, die den übergebenen Kode enthält, und lagert sie in einem Cache ein. Bei darauffolgenden Aufrufen mit demselben @@$php_code@@ wird @@PCCF()@@ den eingelagerten Funktionsnamen zurückgeben.%0a%0aSiehe [[https://www.php.net/manual/de/function.create-function.php|PHP create-function]].%0a%0a>>font-style=italic%3c%3c%0aPHP 7.2 missbilligt %25hlt php%25@@create_function()@@ und zukünftige Versionen werden die Funktion entfernen. Wenn Sie alten Kode übertragen müssen, der @@PCCF()@@ benutzt hat, können Sie gewöhnlich reguläre Funktionen schreiben und den Funktionsnamen dort übergeben, wo Sie vorher das Ergebnis von PCCF() übergeben haben. Nehmen wir z.&nbsp;B. an, Sie haben ein Muster wie dieses:%0a-> %25hlt php%25@@'/(?%3c=^| )([a-z])/' => PCCF("return strtoupper(\$m[1]);")@@,%0a%0aFür PHP_7.2-Kompatibilität können Sie eine Callback-Funktion schreiben:%0a-> %25hlt php%25@@function @@%25green%25my_callback%25hlt php%25@@($m) { return strtoupper($m[1]); }@@%0a%0aVerändern Sie dann noch das Muster, dass es so aussieht:%0a-> %25hlt php%25@@'/(?%3c=^| )([a-z])/' => '@@%25green%25my_callback%25%25@@',@@%0a%0aSiehe auch: das Rezept [[(Cookbook:)PccfToPcfOverride]] erlaubt existierende Rezepte unter PHP 7 laufen zu lassen ohne "''@@deprecated create_function()@@''"-Meldungen zu verursachen.%0a>>%3c%3c%0a%0a%0a!![[#PPRA]] PPRA()%0a%25hlt php%25[@PPRA($array_search_replace, $string)@]%0a%0aDie %25hlt php%25@@PPRA()@@-Funktion (''PmWiki preg_replace array'') kann man einsetzen, um eine Ersetzung mit Hilfe eines regulären Ausdrucks mit oder ohne Auswertung durchzuführen, für PHP_5.5-Kompatibilität.%0a %0aSeit PmWiki 2.2.56 nutzt PmWiki diese Funktion, um die folgenden Arrays abzuarbeiten: $MakePageNamePatterns, $FmtP, $QualifyPatterns, $ROEPatterns, $ROSPatterns, $SaveAttrPatterns, $MakeUploadNamePatterns. Alle Benutzereinstellungen sollten weiterhin mit PHP_5.4 und früher funktionieren, aber Wikis, die mit PHP_5.5 laufen, brauchen ein paar Änderungen. %0a%0aDas erste Argument enthält die "suchen'=>'ersetzen'-Paare, das zweite ist der "haystack"-String, der manipuliert werden soll.%0a%0aDie 'replace'-Teile des Arrays können Strings oder Funktionsnamen sein. Wenn der 'replace'-Teil ein aufrufbarer Funktionsname ist, wird er %25hlt php%25@@via preg_replace_callback()@@ mit dem Array der Übereinstimmungen als erstes Argument aufgerufen. Wenn er keine Funktion ist, wird ein einfacher @@preg_replace()@@-Aufruf durchgeführt. %0a%0aFrüher hat PmWiki solche Konstrukte benutzt:%0a-> %25hlt php%25@@$fmt = preg_replace(array_keys($FmtP), array_values($FmtP), $fmt);@@%0a%0aJetzt ist es möglich, einfach dies zu benutzen:%0a-> %25hlt php%25@@$fmt = PPRA($FmtP, $fmt);@@%0a%0aBeachten Sie, dass die Suchmuster seit PHP_5.5 kein /e-Flag (Evaluation, Auswertung) mehr haben können. Beim Erzeugen eines $array_search_replace-Arrays vor PHP_5.5 konnte man (z.&nbsp;B. für $MakePageNamePatterns) etwas einsetzen wie:%0a-> %25hlt php%25@@'/(?%3c=^| )([a-z])/e' => "strtoupper('$1')",@@%0a%0aSeit PHP_5.5 sollte man dies einsetzen (funktioniert auch mit PHP_5.4 und früher):%0a-> %25hlt php%25@@'/(?%3c=^| )([a-z])/' => PCCF("return strtoupper(\$m[1]);"),@@%0a%0aBeachten Sie, dass das @@/e@@-Flag jetzt weggelassen werden sollte, anstelle von @@'$0', '$1', '$2'@@, sollte man  @@$m[0], $m[1], $m[2]@@, etc. in dem Ersetzungskode einsetzen, und der Aufruf von @@PSS()@@ im Ersetzungskode ist nicht nötig, da Backslashes nicht automatisch hinzugefügt werden. %0a%0a>>font-style=italic%3c%3c%0aAnstatt %25hlt php%25@@PCCF()@@ zu benutzen, haben wir für PHP 7.2 and jünger eine reale Funktion in unser Add-On hinzugefügt, und übergeben ihr den Funktionsnamen als Musterersetzung (siehe Beispiel unter [[#PCCF|PCCF]], das auch unter PHP 4 und 5 funktioniert):%0a-> %25hlt php%25@@'/(?%3c=^| )([a-z])/' => '%25green%25my_callback%25%25',@@%0a>>%3c%3c%0a%0a%0a!![[#PPRE]]PPRE()%25red%25 missbilligt seit PHP 7.2%25%25%0a%25hlt php%25[@PPRE($search_pattern, $replacement_code, $string)@] %0a %0aDie %25hlt php%25@@PPRE()@@-Funktion (''PmWiki preg_replace evaluate'') kann eingesetzt werden, um eine Ersetzung eines regulären Ausdrucks mit Auswertung durchzuführen.%0a%0aSeit PHP_5.5 missbilligt die %25hlt php%25@@preg_replace(@@-Funktion das /e-Evaluations-Flag und zeigt Warnungen an, wenn es doch eingesetzt wird. Die @@PPRE()@@-Funktion erzeugt automatisch eine Callback-Funktion mit dem Ersetzungskode und ruft diese auf.%0a%0aVor PHP_5.5 konnte man solche Aufrufe nutzen:%0a-> %25hlt php%25@@$fmt = preg_replace('/\\$([A-Z]\\w*Fmt)\\b/e','$GLOBALS["$1"]',$fmt);@@%0a%0aSeit PHP_5.5 kann man den vorhergehenden Kode-Schnipsel durch den folgenden ersetzen (funktioniert auch vor PHP 5.5):%0a-> %25hlt php%25@@$fmt = PPRE('@@%25green%25/\\$([A-Z]\\w*Fmt)\\b/%25hlt php%25@@','$GLOBALS[$m[1]]',$fmt);@@%0a%0aBeachten Sie, dass das @@/e@@-Flag jetzt weggelassen werden sollte, anstelle von @@'$0', '$1', '$2'@@, sollte man  @@$m[0], $m[1], $m[2]@@, etc. in dem Ersetzungskode einsetzen, und der Aufruf von @@PSS()@@ im Ersetzungskode ist nicht nötig, da kein automatisches Hinzufügen von Backslashes passiert. %0a%0a>>font-style=italic%3c%3c%0aIn PHP 7.2 und jünger ruft der Aufruf dieser Funktion eine "deprecated"-Notiz hervor. Sie sollten Ihren Kode neu schreiben für den Aufruf der Funktion [[https://www.php.net/preg_replace_callback|preg_replace_callback]], indem Sie den Kode in eine richtige Funktion übertragen: %0a%0a-> %25hlt php%25@@$fmt = preg_replace_callback('@@%25green%25/\\$([A-Z]\\w*Fmt)\\b/ %25hlt php%25@@', 'my_global_var_callback',$fmt);@@%0a-> %25hlt php%25@@function my_global_var_callback($m) { return $GLOBALS[$m[1]]; }@@%0a%0aAnstatt %25hlt php%25@@PCCF()@@ zu benutzen, um eine anonyme Funktion zu erzeugen, fügen wir unserem Add-on eine reale Funktion hinzu und übergeben dann den Funktionsnamen als Muster-Ersetzung (siehe Beispiel bei [[#PCCF|PCCF]], das funktioniert auch mit PHP4 und 5):%0a-> %25hlt php%25@@'/(?%3c=^| )([a-z])/' => '%25green%25my_callback%25%25',@@%0a>>%3c%3c%0a%0a(:if false:)(:comment Überarbeitung nötig, könnte sich ändern:)%0a!![[#PRCB]] PRCB()%0a%25hlt php%25[@PRCB($pat, $repl, $subj, $vars=null, $limit=-1, &$count=null, $flags=0)@]%0a%0aDie %25hlt php%25@@PRCB()@@-Funktion (''PmWiki Regex Replace Callback'') macht es leicht, Variablen an eine benannte Callback-Funktion zu übergeben [[https://php.net/preg_replace_callback|preg_replace_callback()]].%0a%0aWenn Sie die preg_replace_callback()-Funktion benutzen möchten und einige Variablen an die Callback-Funktion übergeben, können Sie etwas wie das Folgende machen:%0a%0a%25hlt php%25[@$result = PRCB($patern, 'my_callback', $subject, $pagename);@]%0a%0aDann wird Ihre Funktion so aufgerufen:%25hlt php%25[@my_callback($matches, $pagename);@]. Sie können mehrere Variablen mittels eines Arrays übergeben.%0a%0aDie Funktion kann auch ohne Variablen zu übergeben aufgerufen werden, noch kürzer als @@preg_replace_callback()@@:%0a%0a%25hlt php%25[@$result = PRCB($patern, 'my_callback', $subject);@]%0a%0a(:ifend:)%0a%0a%0a%0a!![[#Qualify]] Qualify()%0a%25hlt php%25[@Qualify($pagename, $text)@]%0a%0a%25hlt php%25@@Qualify(@@ setzt $QualifyPatterns ein, um relative Verweise und Referenzen in absolute Entsprechungen umzuwandeln. %0aDiese Funktion wird von gewöhnlichen Markups aufgerufen, die Text aus anderen Seiten einfügen. Sie ersetzt Links wie  %25pmhlt%25[@[[Page]]@] durch [@[[Group/Page]]@] und Seiten(text)variablen wie [@{$Title}@] durch [@{Group.Page$Title}@], sodass sie in der Quellenseite und der einbettenden Seite gleichermaßen funktionieren. Siehe auch $QualifyPatterns und %25pmhlt%25@@[[({$Name}#)RetrieveAuthSection]]()@@.%0a%0a%0a!![[#PHSC]] PHSC()%0a%25hlt php%25[@PHSC($string_or_array, $flags=ENT_COMPAT, $encoding=null, $double_encode=true)@]%0a%0aDie %25hlt php%25@@PHSC()@@-Funktion (''PmWiki HTML special characters'') ist ein Ersatz für die PHP-Funktion [[https://www.php.net/manual/de/function.htmlspecialchars.php|htmlspecialchars]].%0a%0aDie %25hlt php%25@@htmlspecialchars()@@-Funktion wurde ab PHP_5.4 in zweierlei Hinsicht verändert: sie benötigt nun einen gültigen String für die eingesetzte Zeichenkodierung und die voreingestellte Zeichenkodierung ist UTF-8. Dadurch können Abschnitte einer Seite auf vielen Sites, die ISO-8859-1 nutzen, leer sein, wenn das dritte Argument ($encoding) in @@htmlspecialchars()@@ bei dessen Aufruf nicht gesetzt ist.%0a%0aDie %25hlt php%25@@PHSC()@@-Funktion ruft @@htmlspecialchars()@@ mit einer 8-bit-Zeichenkodierung als drittes Argument auf, welche Zeichenkodierung das Wiki auch immer hat (es sei denn, Sie setzen explizit eine Zeichenkodierung). Auf diese Weise enthält der String niemals ungültige Zeichen.%0a%0aEs sollte für Entwickler sicher sein, wenn sie Aufrufe von %25hlt php%25@@htmlspecialchars()@@ durch solche von @@PHSC()@@ ersetzten. In @@PHSC()@@ ist nur der erste Parameter obligatorisch, wenngleich Autoren dazu neigen könnten, @@PHSC($string_or_array, ENT_QUOTES)@@ aufzurufen.%0a%0aAnders als  %25hlt php%25@@htmlspecialchars()@@ kann die @@PHSC()@@-Funktion Arrays iterativ bearbeiten, dabei werden nur die Werte verändert, nicht die Schlüssel des Arrays.%0a%0a%0a!![[#PSS]] PSS()%0a%25hlt php%25[@PSS($string)@]%0a%0aDie %25hlt php%25@@PSS(@@)-Funktion (PmWiki Strip Slashes) entfernt die Backslashes, die automatisch durch die /e-Option von PHPs preg_replace()-Funktion vor Anführungszeichen gesetzt werden. @@PSS()@@ wird am ehesten eingesetzt, um Argumente für @@Markup()@@ zu ersetzen, wenn das Muster die @@/e@@-Option gesetzt hat und eines oder mehrere der eingeklammerten Musterteile Backslashes oder Anführungszeichen enthalten könnte.%0a%0a->Von PM: PmWiki erwartet den Einsatz von %25hlt php%25@@PSS()@@ immer innerhalb von Strings in doppelten Anführungszeichen, in deren Inneren wiederum einfach angeführte Strings enthalten sind. Der Grund dafür ist, dass wir nicht wollen, dass @@$1@@ oder @@$2@@ aus Versehen Zeichen enthalten, die dann zwischen den doppelten Anführungzeichen interpretiert werden, wenn @@PSS()@@ durchgeführt wird. %0a-->%25hlt php%25@@Markup('foo', 'inline', '/(something)/e', 'Foo(PSS("$1"))');  # falsch@@%0a-->%25hlt php%25@@Markup('foo', 'inline', '/(something)/e', "Foo(PSS('$1'))");  # richtig@@%0a%0a%25note%25 Beachten Sie, die Extra-Schrägstriche werden nur von %25hlt php%25@@preg_replace()@@%25note%25 mit einem /e-Modifizierer hinzugefügt.%25hlt php%25 Die Markup-Definition mit @@Markup_e()@@ braucht PSS() im Ersetzungsstring NICHT zu benutzen. Die Markup-Definitionen neuen Typs mit @@Markup()@@ und einem einfachen Funktionsnamen als Ersetzung brauchen @@PSS()@@ in der Ersetzungsfunktion NICHT zu benutzen. Löschen Sie die @@PSS()-@@Aufrufe, wenn Sie alte Markup-Regeln in das neue Format übertragen.%0a%0a%0a!!! Beispiel %25block notoc%25%0a%0aDies ist ein fiktives Beispiel, bei dem %25hlt php%25@@PSS()@@ eingesetzt werden sollte. Nehmen wir an, dass Sie eine Direktive %25pmhlt%25[@(:example:)@] definieren wollen, sodass [@(:example "Ein Pferd":)@] diesen HTML-Kode ergibt:%0a->%25hlt html%25[@%3cdiv>"Ein Pferd"%3c/div>@].%0aUnd so könnte die Markup-Regel erzeugt werden:%0a-> %25hlt php%25[@%0aMarkup('example', 'directives',%0a       '/\\(:example\\s(.*?):\\)/e',%0a       "Keep('%3cdiv>'.PSS('$1').'%3c/div>')");%0a@]    %0aDer Einsatz von %25hlt php%25@@PSS()@@ um '@@$1@@' ist nötig, weil der auf das Muster passende Text Anführungszeichen enthalten könnte und das @@/e@@ Backslashes davorsetzen wird. %0a%0a%0a!![[#stripmagic]] stripmagic()%0a%25hlt php%25[@stripmagic($string)@]%0a%0aDiese Funktion sollte eingesetzt werden beim Bearbeiten des Inhalts von  %25hlt php%25[@$_POST@]- oder [@$_GET@]-Variablen, wenn diese Anführungszeichen oder Backslashes enthalten könnten. Sie prüft [@get_magic_quotes()@] und entfernt, beim Ergebnis ''wahr'', die automatisch eingefügten Escapes aus dem String.%0a%0aDiese Funktion kann Arrays rekursiv bearbeiten (nur die Werte werden bearbeitet).%0a%0a!![[#FmtPageName]] FmtPageName()%0a%25hlt php%25[@FmtPageName($fmt, $pagename)@]%0a%0a[[#FmtPageName-desc]]Gibt  %25hlt php%25[@$fmt@] zurück, mit durchgeführter $variablen- und [=$[Internationalisierungs]=]-Ersetzung, mit der Vorgabe, dass die aktuelle Seite [@$pagename@] ist. Siehe unter den [[PmWikiDe/Variables|+]] nach einer (unvollständigen) Liste der verfügbaren Variablen, siehe auch nach in [[PmWikiDe/Internationalizations|+]] wegen der Internationalisierung. Sicherheit: Nicht anwenden bei vom Benutzer eingegebenen Daten.%0a%0aDas ist eine der wichtigsten Funktionen in PmWiki, siehe in [[PmWikiDe/FmtPageName|+]] wegen der vielen Details.%0a%0a%0a!![[#Markup]] Markup()%0a%25hlt php%25[@Markup($name, $when, $pattern, $replace)@]%0a%0a[[#Markup-desc]]Fügt der Umwandlungstabelle ein neues Markup hinzu. Eine detailliertere Beschreibung finden Sie in [[PmWikiDe/CustomMarkup|+]].%0a%0aDiese Funktion wird verwendet, um Übersetzungsregeln in PmWikis Übersetzungs-'Maschine' einzufügen. Alle Argumente von %25hlt php%25[@Markup()@] sind Strings, und zwar %0a%0a:%25hlt php%25[@$name@]: Der String benennt die eingefügte Regel. Wenn es schon eine Regel mit diesem Namen gibt, wird diese Regel ignoriert.%0a:%25hlt php%25[@$when@]: Dieser String wird genutzt, um zu kontrollieren, wann eine Regel angewandt wird relativ zu anderen Regeln. Die Angabe "%3cxyz" bedeutet, wende diese Regel vor der Regel namens "xyz" an, während ">xyz" bedeutet, wende diese Regel nach der Regel namens "xyz" an. Siehe [[(PmWikiDe/CustomMarkup|+]] wegen weiterer Details bezüglich der Reihenfolge von Regeln. %0a:%25hlt php%25[@$pattern@]: Dieser String ist ein [[regulärer Ausdruck -> https://www.php.net/preg_replace]], der von der Übersetzungs-'Maschine' benutzt wird, um nach dem Auftreten dieser Regel in der Quelle für das Markup zu suchen. %0a:%25hlt php%25[@$replace@]: Dieser String wird den auf den regulären Ausdruck passenden Text ersetzen, wenn einer gefunden wurde.%0a%0aSiehe auch [[PmWikiDe/CustomMarkup|+]] und [[Cookbook:Functions#Markup]]%0a%0a%0a!![[#MarkupToHTML]] MarkupToHTML()%0a%25hlt php%25[@MarkupToHTML($pagename, $str)@]%0a%0a[[#MarkupToHTML-desc]] wandelt den String in %25hlt php%25[@$str@], der das Markup enthält, in den korrespondierenden HTML-Kode um, unter der Vorgabe, die aktuelle Seite sei [@$pagename@]. %0a%25hlt php%25@@MarkupToHTML@@ ersetzt als erstes @@\n\n@@ Sequenzen durch @@%3c:vspace>@@, wenn ihm Text übergeben wird. Nach und nach wird @@%3c:vspace>@@ durch die Markup-Regeln behandelt:%0a-> '@@!vspace@@' entfernt @@%3c:vspace>@@ hinter Überschriften.%0a-> '@@%3cvspace>%3cp>@@' ersetzt@@%3c:vspace>%3cp>@@ durch @@%3cp class='vspace'>@@%0a-> '@@%3cvspace>@@' ersetzt %3c:vspace> durch @@%3cdiv class='vspace'>@@%0a-> und schließlich%0a-> '@@^%3c:@@' entfern alle verbliebenen @@%3c:vspace>@@, meist von wiederhergestelltem [=[=]=escaped text=].%0aSiehe auch: [[Cookbook:Functions#MarkupToHTML]]%0a%0a%0a!![[#mkdirp]] mkdirp()%0a%25hlt php%25[@mkdirp($dir)@]%0a %0aDie Funktion %25hlt php%25[@mkdirp($dir)@] legt ein Verzeichnis @@$dir@@ an, wenn es nicht schon existiert, einschließlich aller Elternverzeichnisse, die nötig sind. Für jedes erzeugte Verzeichnis wird geprüft, ob die Rechte für dies Verzeichnis ausreichen, damit PmWiki-Skripten daraus lesen und darin schreiben dürfen. Das schließt den Test auf Einschränkungen ein, die PHPs 'safe_mode'-Einstellungen bewirken. Wenn es [@mkdirp()@] nicht möglich ist, erfolgreich ein Schreib-/Lese-Verzeichnis anzulegen, bricht [@mkdirp()@] mit einer Fehlermeldung ab, die dem Administrator die Schritte anzeigt, entweder @@$dir@@ manuell anzulegen oder PmWiki genügend Rechte einzuräumen, dass es das selbst erledigen kann.%0a%0a!![[#Lock]] Lock()%0a%25hlt php%25[@Lock(0)@]%0a%0aDiese Funktion wird benutzt, um sicherzustellen, dass nur eine Instanz von PmWiki läuft, wenn Dateien geschrieben werden. Sie sperrt nicht Dateien für das Bearbeiten.%0a%0aBenutzen Sie in einem Rezept:%0a* %25hlt php%25[@Lock(2);@] um ein ''exklusives'' Sperren zu erreichen, sodass kein anderer PHP-Prozess Dateien verändern kann. Das kann benutzt werden, wenn Ihre Funktion Dateien auf den Server schreibt.%0a* %25hlt php%25[@Lock(1);@] um ein ''geteiltes (shared)'' Sperren zu erreichen. Das kann eingesetzt werden, wenn Ihre Funktion Dateien auf dem Server liest, im Falle, dass ein anderer Prozess Schreiboperation daran vornimmt.%0a* %25hlt php%25[@Lock(0);@] um ein voriges exklusives oder geteiltes Sperren freizugeben. Benutzen Sie das unmittelbar nachdem Ihre Funktion die Lese- oder Schreiboperation abgeschlossen hat.%0a%0aWenn Sie ein erlangtes Sperren nicht freigeben, sollte es automatisch am Ende des Prozesses freigegeben werden.%0a%0a!![[#MakeLink]] MakeLink()%0a%25hlt php%25[@MakeLink($pagename, $target, $txt, $suffix, $fmt)@]%0a%0aDie Funktion %25hlt php%25[@MakeLink($pagename, $target, $txt, $suffix, $fmt)@] gibt einen HTML-formatierten Anker-Verweis zurück. Ihre Argumente sind wie folgt:%0a $pagename ist die Quellseite%0a $target ist das Ziel des Verweises%0a $txt ist der Wert für '$LinkText' in der Ausgabe %0a $suffix ist ein Anhängsel, das an $txt angehängt wird %0a $fmt ist ein Formatstring, der zur Anwendung kommt%0a%0aWenn $txt NULL ist oder nicht angegeben ist, dann wird es automatisch aus $target bestimmt.%0a%0aWenn $fmt NULL ist oder nicht angegeben ist, dann verwendet MakeLink das Standardformat, das durch den Typ des Verweises gegeben ist. Für Seitenverweise sind das die $LinkPageExistsFmt und die $LinkPageCreateFmt-Variablen, für externe Verweise kommt es entweder vom $IMapLinkFmt-Array oder von $UrlLinkFmt. Innerhalb des Formatstrings wird $LinkUrl ersetzt durch den aufgelösten URL für den Verweis, $LinkText wird ersetzt durch den zugehörigen Text und $LinkAlt wird ersetzt durch alle "title"-Informationen (alternativer Text), die mit dem Verweise zusammenhängen.%0a%0aSiehe auch: [[PmWikiDe/MakeLink]] und [[Cookbook:Functions#MakeLink]]%0a%0a%0a!![[#MakeUploadName]]MakeUploadName()%0a%25hlt php%25@@MakeUploadName($pagename, $x)@@%0a%0a%25hlt php%25@@MakeUploadName()@@ nimmt einfach einen String @@$x@@ (den Namen eines Anhangs) und wandelt ihn in einen gültigen Namen um, indem alle unerwünschten Zeichen entfernt werden. Der Name soll mit einem alphanumerischen Zeichen beginnen und enden. Seit Version 2.0.beta28, wird die Dateierweiterung in Kleinbuchstaben umgewandelt. Diese Funktion ist in @@scripts/upload.php@@ definiert und wird nur angewendet, wenn Hochladen von Dateien aktiviert ist.%0a%0a!![[#DownloadUrl]] %25hlt php%25@@DownloadUrl($pagename, $path)@@%0a%0aDiese Funktion gibt den öffentlichen URL einer angehängten Datei zurück. Die Argumente sind die Folgenden:%0a* $pagename - die aktuell bearbeitete Seite%0a* %25hlt php%25@@$path@@ - der Dateipfad, wie in @@file.ext@@, @@Otherpage.ext@@ oder @@Group/OtherPage/file.ext@@%0a%0aWenn die Datei nicht existiert, gibt die Funktion false zurück. Die globale Variable%0a%25hlt php%25@@$FmtV['$LinkUpload']@@ enthält den URL zum Hochladen-Formular für eine Datei mit einem solchen Namen zum Anhängen. Die globale Variable %25hlt php%25@@$FmtV['$LinkDownload']@@ enthält den URL zur Datei, als sei sie bereits hochgeladen.%0a%0aDie Funktion ruft [[#MakeUploadName|%25hlt php%25@@MakeUploadName()@@]] mit dem @@$path@@-Argument auf, also brauchen Sie das nicht selbst tun, bevor Sie die Funktion aufrufen.%0a%0aDer zurückgegebene URL berücksichtigt $UploadPrefixFmt und $EnableDirectDownload des Wikis.%0a%0a%0a!![[#SessionAuth]] SessionAuth()%0a%25hlt php%25[@SessionAuth($pagename, $auth=NULL)@]%0a%0a%25hlt php%25@@SessionAuth()@@ bewältigt die Aufrechterhaltung der Authentifikation mit Cookie-Sitzungen. Die Sitzung enthält ein Passwort oder eine überprüfte ID und verbundene Gruppen von vorherigen Aufrufen. Es fügt der Sitzung Elemente, die von @@$auth@@ übergeben werden, hinzu. Sie schreibt außerdem jedes Element, das in der Sitzung gesichert wurde, in @@$AuthPw (Passwörter)@@ und @@$AuthList (IDs und Gruppen)@@. %0a%0a%0a!![[#IsAuthorized]] IsAuthorized()%0a%25hlt php%25[@IsAuthorized($chal, $source, &$from)@]%0a%0a%25hlt php%25@@IsAuthorized()@@ nimmt einen Seitenattribute-String (z.&nbsp;B. "id:user1 $1$Ff3w34HASH...") in @@$chal@@ entgegen.%0a%0a%25hlt php%25@@$source@@ wird einfach zurückgegeben und wird gebraucht, um die Auth-Kaskade (Seitenattribute - Gruppenattribute - @@$DefaultPassword@@) aufzustellen. %0a%0a%25hlt php%25@@$from@@ wird zurückgegeben, wenn @@$chal@@ leer ist, weil es nicht vor dem Aufruf von @@IsAuthorized()@@ überprüft wird. Das ist nötig für die Auth-Kaskade. %0a%25hlt php%25@@IsAuthorized()@@ gibt ein Array mit drei Werten zurück: @@$auth@@ @@1@@ - authenticated, @@0@@ - not authenticated, @@-1@@ - refused; @@$passwd@@; @@$source@@ von der Parameterliste.%0a%0a%0a!![[#CondAuth]] CondAuth()%0a%25hlt php%25[@CondAuth($pagename, 'auth level')@]%0a%0a%25hlt php%25[@CondAuth()@] implementiert das  [[ConditionalMarkup]] für [@(:if auth level:)@]. Zum Beispiel ist [@CondAuth($pagename,'edit')@] wahr, wenn die Autorisierungsebene 'edit' ist. Benutzen Sie die Funktion in lokalen Konfigurationsdateien,um Bedingungen mit einer Überprüfung der Autorisierungsebenen aufzustellen, ähnlich des Gebrauchs von  [@(:if auth level:)@] in Wiki-Seiten.  %0a%0aSie können entweder Autorisierungsebenen (@@'read', 'edit', 'attr', 'admin'@@) oder Aktionsnamen (@@'browse', 'upload', 'source'@@) als das zweite Argument von CondAuth() einsetzen. %0a%0aAnmerkung: %25hlt php%25@@CondAuth()@@ sollte aufgerufen werden, nachdem alle Autorisierungssebenen und Passwörter definiert worden sind. Wenn Sie sie mit [[PmWikiDe.Drafts]] benutzen, sollten Sie das draft.php-Skript einfügen bevor sie @@CondAuth()@@ aufrufen:%0a%25hlt php%25[@%0a   $EnableDrafts = 1;%0a   $DefaultPasswords['publish'] = pmcrypt('secret');%0a   include_once("$FarmD/scripts/draft.php");%0a   if (! CondAuth($pagename, 'edit')) { /* was auch immer */ }%0a@]%0a%0aEs ist wichtig, sich zu erinnern, dass der beste Platz für den Aufruf von CondAuth() nahe dem Ende Ihres config.php-Skriptes ist. CondAuth() bevölkert den Cache (die Cashes), nachfolgende (Kochbuch-)Skripten könnten damit Schwierigkeiten haben, weil sie einen leeren Cache erwarten. Troubleshooting ist in einem solchen Fall eine schwierige Angelegenheit.%0a%0a%0a!! [[#RetrieveAuthPage]] RetrieveAuthPage()%0a%25hlt php%25@@RetrieveAuthPage($pagename, $level, $authprompt=true, $since=0)@@%0a%0aVergleichen Sie Pms Worte in https://www.pmwiki.org/pipermail/pmwiki-users/2005-April/012804.html, wobei: %0a%0a   $pagename   - Name der zu lesenden Seite%0a   $level      - erforderliche Autorisierungsebene (read/edit/auth/upload)%0a   $authprompt - wahr, wenn der Benutzer nötigenfalls zur Eingabe des Passwortes %0a                 aufgefordert werden sollte%0a   $since      - wieviel vom Seitenverlauf gelesen werden soll %0a                 0 == lies die komplette Seite einschließlich der ganzen Versionen ein%0a                 READPAGE_CURRENT == lies die Seite ein ohne die Versionen zu laden%0a                 timestamp == lies die Versionen nur zurück bis zum Zeitstempel ein%0a%0aDer @@$since@@-Parameter erlaubt PmWiki, das Einlesen zu beenden, sobald es die benötigte Information hat &ndash; d.&nbsp;h., wenn eine Operation wie Browsen die Seitenversionen nicht braucht, kann die Angabe von READPAGE_CURRENT die Ladezeit merklich verkürzen. (Das kann insbesondere für so etwas wie Suchen und Seitenlisten wichtig sein.)%0aJedenfalls wird bei Kombination mit  %25hlt php%25@@UpdatePage()@@ die upgedatete Seite keine Versionen enthalten. %0a%0aWenden Sie zum Beispiel %25hlt php%25[@$page = @RetrieveAuthPage('Main.MyPage', 'read')@] an, um ein Seitenobjekt zu erhalten, das all die Informationen der korrespondierenden Datei in unterschiedlichen Schlüsseln enthält, [@$page['text']@] beispielsweise enthält einen String mit dem aktuellen Inhalt (wiki markup) von Main.MyPage. Dieser Gebrauch ist der alternativen Funktion [@ReadPage($pagename, $since=0)@] vorzuziehen, da sie die Autorisierung des Benutzers berücksichtigt, d.&nbsp;h. sie überprüft die Autorisierungsebene vorm Laden der Seite, jedenfalls kann sie so eingestellt werden. [@ReadPage()@] liest eine Seite ohne Rücksicht auf die Rechte ein.%0a%0aÜbergibt man 'ALWAYS' als Autorisierungsebene (statt 'read', 'edit', etc.), veranlasst das %25hlt php%25@@RetrieveAuthPage()@@, die Seite auf jeden Fall zu lesen, sogar, wenn sie mit einem Lesepasswort geschützt ist.    %0a%0a%0a!! [[#RetrieveAuthSection]] RetrieveAuthSection()%0a%25hlt php%25@@RetrieveAuthSection($pagename, $pagesection, $list=NULL, $auth='read')@@%0a%0a%25hlt php%25@@RetrieveAuthSection()@@ extrahiert einen Textabschnitt aus einer Seite. Wenn @@$pagesection@@ mit etwas anderem als '@@#@@' beginnt, wird der Teil vor dem ersten '@@#@@' &ndash; oder bei dessen Fehlen, der gesamte Text &ndash; als Angabe der gewünschten Herkunftsseite angesehen. Andernfalls sucht @@RetrieveAuthSection()@@, sofern @@$list@@ angegeben wurde, in den darin genannten Seiten (sollte ein Array sein). Falls keine dieser beiden Möglichkeiten eine Quellseite vorgegeben hat, wird $pagename als Quelle verwendet.%0a* Der Name der verwendeten Quellseite wird in der globalen Variablen @@$RASPageName@@ gespeichert.%0a* Die aufrufende Funktion ist selbst verantwortlich dafür, ob und wie der beschaffte Text mittels %25hlt php%25@@Qualify()@@ aufbereitet werden muss. Dies ist (nur) dann nötig, wenn Sie vorausbestimmen möchten, wie unqualifizierte Seiten- und Variablennamen aufgelöst werden sollen.%0a** Wenn sie so funktionieren sollen wie im Originaltext, wählen Sie die Quellseite als Bezugsseite für%25hlt php%25 @@Qualify()@@.%0a** Wenn der importierte Text nicht als Wikitext gedacht ist, sondern als sonstige Auszeichnungssprache, in der Doppelpaare eckiger Klammern  vorkommen können, (:comment %3c-- nicht gemeint: Paare 〚doppelter eckiger Klammern〛 = U+301A/U+301B:) oder Dollarzeichen in geschweiften Klammern, dann sollte der Text nicht mittels %25hlt php%25@@Qualify()@@ angepasst werden. Wenn Sie den Text in einen Wikitext ausgeben wollen, müssen Sie ihn möglicherweise mittels @@Keep()@@ als "endgültig" verpacken lassen (im Falle von HTML-, RSS- oder sonstig XML-artiger Ausgabe: vorher @@PHSC()@@!), damit nachgelagerte Verarbeitungsschritte nicht auf die Idee kommen, sie müssten eine scheinbar vergessene @@Qualify()@@zierung nachholen.%0a** Wenn Ihr Kode Wikitext für eine Hilfsseite produziert, die von anderen Seiten in einem späteren Stadium der Einfügungskette einverleibt wird, benutzen Sie "GruppenName.SeitenName" der Hilfsseite als $pagename-Argument für %25hlt php%25@@Qualify()@@.%0a%0aDas bietet einen Weg, das von ReadPage zurückgegebene Array zu begrenzen, sodass es nur den Inhalt bis zu einer bestimmten Abschnittmarkierung herauszieht. Zum Beispiel, ziehe den Text zwischen dem Textbeginn und '##blogend' heraus:%0a->%25hlt php%25[@%0afunction FeedText($pagename, &$page, $tag) {%0a  $text = RetrieveAuthSection($pagename, '##blogend');%0a  $content = MarkupToHTML($pagename, $text);%0a  return "%3c$tag>%3c![CDATA[$content]]>%3c/$tag>";%0a}%0a@]%0a%0aDas '##blogend'-Argument heißt, lies vom Beginn der Seite bis genau vor der Zeile, die die Markierung enthält. %0aSiehe [[IncludeOtherPages|+]] wegen weiterer Informationen über die Abschnittspezifikationen.%0a%0aDiese Version liest keinen Text von Seiten, die lesegeschützt sind; wenn Sie Text auch von lesegeschützten Seiten haben wollen:%0a->%25hlt php%25[@%0a  $text = RetrieveAuthSection($pagename, '##blogend', NULL, 'ALWAYS');%0a@]%0a%0a%0a!! [[#UpdatePage]] UpdatePage()%0a%25hlt php%25@@UpdatePage($pagename, $old (page object), $new (page object));@@%0a%0a''[[PmWikiDe/UpdatePage|weitere technische Anmerkungen]]''%0a%0a%25hlt php%25[@UpdatePage()@] erlaubt Kochbuchrezepten, das Verhalten des Bearbeitens einer Wikiseite mit dem Browser zu imitieren. %0aIntern macht PmWiki einige haushälterische Arbeiten, die über diese Funktion erreichbar sind (Erhalten der Verlaufs-(diff)-Information, Erhöhen der Seitenrevisionsnummer, Auffrischen der RecentChanges-Seiten, Senden von E-Mail-Benachrichtigungen etc. )%0a* "Page objekt" bezieht sich auf ein Array, das von %25hlt php%25[@RetrieveAuthPage($pagename, $level, $authprompt=true, $since=0);@] (vorzugsweise) zurückgegeben wurde oder von [@ReadPage($pagename); @] (berücksichtigt keine Seitensicherheit). Anmerkung: @@$new['text']@@ sollte alle Seitendaten für die neue Version der Seite enthalten.%0a* Wenn eine Seite nicht existiert, wird %25hlt php%25@@UpdatePage()@@ versuchen, sie anzulegen.%0a* Weglassen von $old (z.&nbsp;B. %25hlt php%25[@UpdatePage($pagename, '', $new);@]) wird alle Seitenverlaufsdaten löschen &ndash; ein ''tabula rasa''.%0a** Wenn Sie $old erhalten durch die Benutzung von %25hlt php%25@@RetrieveAuthPage($pagename,$auth,$prompt,READPAGE_CURRENT)@@ und @@$new=$old@@ setzen, wird @@UpdatePage()@@ auch alle früheren Versionen löschen.%0a%25hlt php%25@@UpdatePage()@@ kann nicht direkt von config.php aufgerufen werden, weil es notwendige Initialisierungen gibt, die erst später in @@pmwiki.php@@ gemacht werden. Es reicht nicht, @@stdconfig.php@@ zu laden. Wenn Sie @@UpdatePage()@@ nutzen wollen, müssen Sie es innerhalb einer [[PmWikiDe/CustomMarkup|eigenen Auszeichnung]], eines [[Cookbook:MarkupExpressionSamples|eigenen Markup-Ausdrucks]], oder einer [[PmWikiDe/CustomActions | benutzerdefinierten Aktion]] tun.%0a%0a%0a!! [[#InsertEditFunction]] InsertEditFunction()%0a%25hlt php%25@@InsertEditFunction($newfn, $where='%3cPostPage')@@%0a%0aDiese Funktion macht es Rezeptautoren einfach, eine eigene Funktion in einer bestimmten Position des Prozesses einzufügen, siehe $EditFunctions und [[#UpdatePage|UpdatePage()]]. %0a%0aDas erste Argument ist der Name der neuen Funktion.%0a%0aDas zweite Argument ist die Position, an der die neue Funktion eingefügt werden soll, relativ zu anderen Bearbeitenfunktionen (edit functions). Das kann sein:%0a* @@"%3c"@@ am Beginn, vor der ersten Bearbeitenfunktion%0a* @@">"@@ am Ende, nach der letzten Bearbeitenfunktion%0a* @@"%3cExistingEditFunction"@@ vor einer angegebenen Bearbeitenfunktionen%0a* @@">ExistingEditFunction"@@ nach einer angegebenen Bearbeitenfunktionen%0a%0aDie Funktion gibt bei Erfolg ''true'' zurück, beim Scheitern wird ''false'' zurückgegeben (wenn die angegebenen Funktion nicht existiert oder nicht erkannt wird)%0a%0a!! [[#DisableSkinParts]] DisableSkinParts()%0a%25hlt php%25@@DisableSkinParts('parts to disable');@@%0a%0aDiese Funktion erlaubt, die Abschnitte des Skins, alsda sind 'header', 'footer', 'title', 'actions', und 'sidebar' zu deaktivieren wie mit den korrespondierenden Direktiven %25pmhlt%25@@[=(:notitle:) (:noleft:)=]@@ etc. In Ihrer Funktion benutzen sie dann so etwas wie:%0a->%25hlt php%25[@%0a  DisableSkinParts('Left Header Footer Action Title');%0a@]%0a%0a!! [[#ParseArgs]] ParseArgs()%0aSiehe Cookbook:ParseArgs. %0a%0a!! [[#Redirect]] Redirect()%0a%0a!! [[#PageIndexTerms]] PageIndexTerms()%0a%0a!! [[#AsSpaced]] AsSpacedUTF8(), AsSpaced()%0a%0a>>hlt php%3c%3c%0a@@AsSpaced()@@ ist in @@pmwiki.php@@ deklariert.\\%0a@@AsSpaced()@@ konvertiert eine Zeichenkette mit Wikiwörtern in eine Version der Zeichenkette mit Leerzeichen.%0aDie Funktion kann via $AsSpacedFunction überschrieben werden, wie es in @@AsSpacedUTF8()@@ gemacht wird.\\%0a@@AsSpacedUTF8()@@ ist im @@xlpage-utf-8.php@@-Skript deklariert.%0a>>%3c%3c%0a%0a!!!Siehe auch %0a[[Cookbook.Functions]] [-auf englisch-]%0a%0aKategorien: [[!PmWiki Developer]]%0a
time=1684577596
title=Funktionen
